library(progressr)
handlers(global = TRUE)
source(here("data-raw","functions.R"))
#from https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files
#location, layers ----
main        <- here("data-raw","source","ASGS_2021_Main_Structure_GDA2020.gpkg")
nonabs      <- here("data-raw","source","ASGS_Ed3_Non_ABS_Structures_GDA2020_updated_2022.gpkg")
indigenous  <- here("data-raw","source","ASGS_Ed3_2021_Indigenous_Structure_GDA2020.gpkg")
other       <- here("data-raw","source","ASGS_2021_SUA_UCL_SOS_SOSR_GPKG_GDA2020.gpkg")
main_layers       <- rgdal::ogrListLayers(main)
nonabs_layers     <- rgdal::ogrListLayers(nonabs)
indigenous_layers <- rgdal::ogrListLayers(indigenous)
other_layers      <- rgdal::ogrListLayers(other)
state       <- "Australian Capital Territory"
state_short <- "ACT"
temp_file <- here("data-raw","temp_df.parquet")
base_file <- here("data-raw","base_sf3.parquet")
ced_file <- here("data-raw","source","divisions-Aug-2021-by-2016-SA1")
# get SA1s  ----
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020",state=state)
sa1_nbr <- nrow(base)
state_boundary <- load_geo(main,layer="STE_2021_AUST_GDA2020",state=state)
# Indigenous layers ----
#indigenous_layers
indigenous <- load_geo(indigenous, layer="ILOC_2021_AUST_GDA2020",state=state)
full_overlap <- full_coverage(base,
bigger=indigenous,
base_id="SA1_CODE_2021",
bigger_id="ILOC_CODE_2021")
overlapped <- full_overlap %>%
distinct(SA1_CODE_2021) %>%
mutate(dummy=TRUE)
base_renmant <- base  %>%
left_join(overlapped,by="SA1_CODE_2021") %>%
filter(is.na(dummy)) %>%
select(-dummy)
intersects <- intersections(base_renmant,
bigger=indigenous,
base_id="SA1_CODE_2021",
bigger_id="ILOC_CODE_2021",
base_empty_label="SA2_NAME_2021",
bigger_empty_label="ILOC_NAME_2021"
)
intersected <- intersects %>%
distinct(SA1_CODE_2021) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="SA1_CODE_2021") %>%
filter(is.na(dummy)) %>%
select(-dummy)
base <- base %>%
left_join(full_overlap,by="SA1_CODE_2021") %>%
filter(!is.na(ILOC_CODE_2021))
base <- bind_rows(base,intersects)
st_write_parquet(base,base_file)
rm(base_renmant,indigenous,intersects,full_overlap,overlapped,intersected,non_matched)
## UCL ----
ucl  <- load_geo(other, layer="UCL_2021_AUST_GDA2020",state=state)
full_overlap <- full_coverage(base,
bigger=ucl,
base_id="SA1_CODE_2021",
bigger_id="UCL_CODE_2021",
divisions = 347)
base_renmant <- base  %>%
filter(!(SA1_CODE_2021 %in% full_overlap$SA1_CODE_2021))
intersects <- intersections(base_renmant,
bigger=ucl,
base_id="SA1_CODE_2021",
bigger_id="UCL_CODE_2021",
base_empty_label="SA2_NAME_2021",
bigger_empty_label="UCL_NAME_2021")
non_matched <- base %>%
filter(if_any(c("SA1_CODE_2021"), ~ !(.x %in% unique(c(full_overlap$SA1_CODE_2021,
intersects %>% st_drop_geometry() %>%
select(SA1_CODE_2021) %>%
pull()
)))))
base <- base %>%
left_join(full_overlap,by="SA1_CODE_2021") %>%
filter(!is.na(UCL_CODE_2021))
base <- bind_rows(base,intersects)
st_write_parquet(base,base_file)
rm(base_renmant,ucl,intersects,full_overlap,non_matched)
#non abs, from bigger to smaller structures
#Tourism Regions ----
tr <- load_geo(nonabs,"TR_2021_AUST_GDA2020", state=state)
full_overlap <- full_coverage(base,
bigger=tr,
base_id="SA1_CODE_2021",
bigger_id="TR_CODE_2021")
base_renmant <- base  %>%
filter(!(SA1_CODE_2021 %in% full_overlap$SA1_CODE_2021))
intersects <- intersections(base_renmant,
bigger=tr,
base_id="SA1_CODE_2021",
bigger_id="TR_CODE_2021",
base_empty_label="SA2_NAME_2021",
bigger_empty_label="TR_NAME_2021")
non_matched <- base %>%
filter(if_any(c("SA1_CODE_2021"), ~ !(.x %in% unique(c(full_overlap$SA1_CODE_2021,
intersects %>% st_drop_geometry() %>%
select(SA1_CODE_2021) %>%
pull()
)))))
base <- base %>%
left_join(full_overlap,by="SA1_CODE_2021") %>%
filter(!is.na(TR_CODE_2021))
base <- bind_rows(base,intersects,non_matched)
st_write_parquet(base,base_file)
rm(base_renmant,tr,intersects,full_overlap,non_matched)
# CED ----
# CED 2021 ----
ced2021 <- load_geo(nonabs,"CED_2021_AUST_GDA2020", state=state)
full_overlap <- full_coverage(base,
bigger=ced2021,
base_id="SA1_CODE_2021",
bigger_id="CED_CODE_2021")
base_renmant <- base  %>%
filter(!(SA1_CODE_2021 %in% full_overlap$SA1_CODE_2021))
intersects <- intersections(base_renmant,
bigger=ced2021,
base_id="SA1_CODE_2021",
bigger_id="CED_CODE_2021",
base_empty_label="SA2_NAME_2021",
bigger_empty_label="CED_NAME_2021")
non_matched <- base %>%
filter(if_any(c("SA1_CODE_2021"), ~ !(.x %in% unique(c(full_overlap$SA1_CODE_2021,
intersects %>% st_drop_geometry() %>%
select(SA1_CODE_2021) %>%
pull()
)))))
base <- base %>%
left_join(full_overlap,by="SA1_CODE_2021") %>%
filter(!is.na(CED_CODE_2021))
base <- bind_rows(base,intersects,non_matched)
st_write_parquet(base,base_file)
rm(base_renmant,ced2021,intersects,full_overlap,non_matched)
# CED 2018 - valid for 2019 election ----
ced2018<- strayr::read_absmap("ced2018") %>%
st_transform(st_crs(base))    %>%
select(ced_code_2018,ced_name_2018)
colnames(ced2018)[1:2] <- str_to_upper(colnames(ced2018)[1:2])
ced_state1 <- st_within(ced2018,state_boundary,sparse=FALSE)
ced_state2 <- st_touches(ced2018,state_boundary,sparse=FALSE)
ced_state3 <- ced2018 %>%
filter(str_detect(CED_NAME_2018, str_c("\\(",state_short))) %>%
st_drop_geometry() %>%
pull(CED_CODE_2018)
ced_state <- c(ced2018[ced_state1,]$CED_CODE_2018,
ced2018[ced_state2,]$CED_CODE_2018,
ced2018[ced_state3,]$CED_CODE_2018,
)
ced2018 %>%
filter(str_detect(CED_NAME_2018, str_c("\\(",state_short))) %>%
st_drop_geometry()
ced_state <- c(ced2018[ced_state1,]$CED_CODE_2018,
ced2018[ced_state2,]$CED_CODE_2018,
ced2018[ced_state3,]$CED_CODE_2018,
)
ced_state <- c(ced2018[ced_state1,]$CED_CODE_2018,
ced2018[ced_state2,]$CED_CODE_2018,
ced2018[ced_state3,]$CED_CODE_2018
)
ced_state <- unique(ced_state)
ced_state <- c(ced2018[ced_state1,]$CED_CODE_2018,
ced2018[ced_state2,]$CED_CODE_2018,
ced2018[ced_state3,]$CED_CODE_2018
)
ced_state1
ced2018<- strayr::read_absmap("ced2018") %>%
st_transform(st_crs(base))    %>%
select(ced_code_2018,ced_name_2018)
colnames(ced2018)[1:2] <- str_to_upper(colnames(ced2018)[1:2])
ced_state1 <- st_within(ced2018,state_boundary,sparse=FALSE)
ced_state2 <- st_touches(ced2018,state_boundary,sparse=FALSE)
ced_state3 <- ced2018 %>%
filter(str_detect(CED_NAME_2018, str_c("\\(",state_short))) %>%
st_drop_geometry() %>%
pull(CED_CODE_2018)
ced2018[ced_state1,]$CED_CODE_2018
ced2018[ced_state2,]$CED_CODE_2018
ced2018[ced_state3,]$CED_CODE_2018
ced2018
state_boundary
ced2018[ced_state3,]$CED_CODE_2018
ced_state3
ced_state <- c(ced2018[ced_state1,]$CED_CODE_2018,
ced2018[ced_state2,]$CED_CODE_2018,
ced_state3
)
ced_state <- unique(ced_state)
ced_state
ced2018
View(ced2018)
ced2018 %>% filter(CED_NAME_2018=="Canberra")
#LGAs ----
lga <- load_geo(nonabs,"LGA_2022_AUST_GDA2020", state=state)
full_overlap <- full_coverage(base,
bigger=lga,
base_id="SA1_CODE_2021",
bigger_id="LGA_CODE_2022")
base_renmant <- base  %>%
filter(!(SA1_CODE_2021 %in% full_overlap$SA1_CODE_2021))
intersects <- intersections(base_renmant,
bigger=lga,
base_id="SA1_CODE_2021",
bigger_id="LGA_CODE_2022",
base_empty_label="SA2_NAME_2021",
bigger_empty_label="LGA_NAME_2022")
non_matched <- base %>%
filter(if_any(c("SA1_CODE_2021"), ~ !(.x %in% unique(c(full_overlap$SA1_CODE_2021,
intersects %>% st_drop_geometry() %>%
select(SA1_CODE_2021) %>%
pull()
)))))
base <- base %>%
left_join(full_overlap,by="SA1_CODE_2021") %>%
filter(!is.na(CED_CODE_2021))
base <- bind_rows(base,intersects,non_matched)
st_write_parquet(base,base_file)
rm(base_renmant,lga,intersects,full_overlap,non_matched)
#POAS ----
poa <- load_geo(nonabs,"POA_2021_AUST_GDA2020", state=state)
poa_state1 <- st_within(poa,state_boundary,sparse=FALSE)
poa_state2 <- st_touches(poa,state_boundary,sparse=FALSE)
poa_state <- c(poa[poa_state1,]$POA_CODE_2021,
poa[poa_state2,]$POA_CODE_2021)
poa_state <- unique(poa_state)
poa <- poa %>% filter(POA_CODE_2021 %in% poa_state)
full_overlap <- full_coverage(base,
bigger=sed,
base_id="SA1_CODE_2021",
bigger_id="SED_CODE_2021")
full_overlap <- full_coverage(base,
bigger=poa,
base_id="SA1_CODE_2021",
bigger_id="POA_CODE_2021")
base_renmant <- base  %>%
filter(!(SA1_CODE_2021 %in% full_overlap$SA1_CODE_2021))
intersects <- intersections(base_renmant,
bigger=poa,
base_id="SA1_CODE_2021",
bigger_id="POA_CODE_2021",
base_empty_label="SA2_NAME_2021",
bigger_empty_label="POA_NAME_2021")
intersects <- intersections(base_renmant,
bigger=poa,
base_id="SA1_CODE_2021",
bigger_id="POA_CODE_2021",
base_empty_label="SA2_NAME_2021",
bigger_empty_label="POA_NAME_2021")
non_matched <- base %>%
filter(if_any(c("SA1_CODE_2021"), ~ !(.x %in% unique(c(full_overlap$SA1_CODE_2021,
intersects %>% st_drop_geometry() %>%
select(SA1_CODE_2021) %>%
pull()
)))))
View(non_matched)
# setup, aux ----
library(here)
library(fs)
library(sf)
library(tidyverse)
library(arrow)
library(sfarrow)
library(progressr)
library(auspol)
handlers(global = TRUE)
source(here("data-raw","functions.R"))
main        <- here("data-raw","source","ASGS_2021_Main_Structure_GDA2020.gpkg")
nonabs      <- here("data-raw","source","ASGS_Ed3_Non_ABS_Structures_GDA2020_updated_2022.gpkg")
indigenous  <- here("data-raw","source","ASGS_Ed3_2021_Indigenous_Structure_GDA2020.gpkg")
other       <- here("data-raw","source","ASGS_2021_SUA_UCL_SOS_SOSR_GPKG_GDA2020.gpkg")
main_layers       <- rgdal::ogrListLayers(main)
nonabs_layers     <- rgdal::ogrListLayers(nonabs)
indigenous_layers <- rgdal::ogrListLayers(indigenous)
other_layers      <- rgdal::ogrListLayers(other)
main_layers
a <-load_geo(main,"STE_2021_AUST_GDA2020")
unique(a$STATE_NAME_2021)
a %>% ggplot(aes(fill=STATE_NAME_2021))+ geom_sf()
a %>% filter(STATE_NAME_2021=="Other Territories") %>% ggplot(aes(fill=STATE_NAME_2021))+ geom_sf()
list_divisions(filters=list(`2019`=TRUE))
load_geo(other,"CED_2021_AUST_GDA2020")
ceds_2021 <- load_geo(nonabs,"CED_2021_AUST_GDA2020")
ceds_2021 <- load_geo(nonabs,"CED_2021_AUST_GDA2020") %>%
filter(STATE_NAME_2021 %in% c("Fenner","Bean","Lingiari"))
ceds_2021 <- load_geo(nonabs,"CED_2021_AUST_GDA2020") %>%
filter(CED_NAME_2021 %in% c("Fenner","Bean","Lingiari"))
library(auscensus)
library(tidyverse)
library(here)
library(sf)
library(leaflet)
vic <- st_read("/Users/carlosyanez/OneDrive/Documents/GitHub/aussiemaps/data-raw/2021_Victoria.gpkg")
here()
vic <- st_read(here("data-raw","2021_Victoria.gpkg")
)
a <- list_census_tables()
View(a)
a <- list_census_attributes("14")
remotes::install_github("carlosyanez/auscensus")
.rs.restartR()
remotes::install_github("carlosyanez/auscensus")
remotes::install_github("carlosyanez/auscensus")
remove.packages("auscensus")
remotes::install_github("carlosyanez/auscensus")
vic <- st_read(here("data-raw","2021_Victoria.gpkg"),query="SELECT * FROM 2021_Victoria WHERE UCL_NAME_2021==Melbourne")
library(sf)
vic <- st_read(here("data-raw","2021_Victoria.gpkg"),query="SELECT * FROM 2021_Victoria WHERE UCL_NAME_2021==Melbourne")
library(here)
vic <- st_read(here("data-raw","2021_Victoria.gpkg"),query="SELECT * FROM 2021_Victoria WHERE UCL_NAME_2021==Melbourne")
main_layers       <- rgdal::ogrListLayers(here("data-raw","2021_Victoria.gpkg"))
main_layers
vic <- st_read(here("data-raw","2021_Victoria.gpkg"),query="SELECT * FROM 2022_Victoria WHERE UCL_NAME_2021==Melbourne")
vic <- st_read(here("data-raw","2021_Victoria.gpkg"),query="SELECT * FROM 2022_Victoria")
vic <- st_read(here("data-raw","2021_Victoria.gpkg"),query="SELECT UCL_NAME_2021 FROM 2022_Victoria")
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT UCL_NAME_2021 FROM 2016_Victoria")
main_layers       <- rgdal::ogrListLayers(here("data-raw","2016_Victoria.gpkg"))
main_layers
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT UCL_NAME_2021 FROM GPKG")
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT UCL_NAME_2021 FROM 2016_Victoria")
main_layers       <- rgdal::ogrListLayers(here("data-raw","2016_Victoria.gpkg"))
main_layers
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT UCL_NAME_2021 FROM 2016_Victoria")
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT * FROM '2016_Victoria;")
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT * FROM '2016_Victoria'")
vic
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT * FROM '2016_Victoria' WHERE UCL_NAME_2021='Melbourne'")
vic <- st_read(here("data-raw","2016_Victoria.gpkg"),query="SELECT * FROM '2016_Victoria' WHERE UCL_NAME_2016='Melbourne'")
aussiemaps_file <- "CED_CODE_2021"
refresh=getOption("aussiemaps_refresh", FALSE)
aussiemaps_type=NULL
force=FALSE
obj <- NULL
if (Sys.getenv("aussiemaps_cache_dir") != "") {
cache_dir <- Sys.getenv("aussiemaps_cache_dir")
cache_dir <- path.expand(cache_dir)
} else {
cache_dir <- manage_cache_dir(path("aussiemaps"))
}
#' @param path The full path to the desired cache directory
#' @importFrom utils read.table write.table
#' @noRd
#' @examples \dontrun{
#' # Set the cache directory
#' cache_dir('PATH TO MY NEW CACHE DIRECTORY')
#'
#' # Check to see if it has been set correctly
#' Sys.getenv('aussiemaps_cache_dir')
#' }
manage_maps_cache_dir <- function(path) {
home <- Sys.getenv("HOME")
renv <- file.path(home, ".Renviron")
if(!dir.exists(path)){
dir.create(path,recursive = TRUE)
}
if (!file.exists(renv)) {
file.create(renv)
}
check <- readLines(renv)
if (isTRUE(any(grepl('aussiemaps_cache_dir', check)))) {
oldenv <- read.table(renv,sep="=",stringsAsFactors = FALSE)
newenv <- oldenv[!grepl('aussiemaps_cache_dir', oldenv$V1), ]
write.table(newenv, renv, quote = FALSE, sep = "=",
col.names = FALSE, row.names = FALSE)
}
var <- paste0("aussiemaps_cache_dir=", "'", path, "'")
write(var, renv, sep = "\n", append = TRUE)
message(sprintf("Your new cache directory is %s. \nTo use now, restart R or run `readRenviron('~/.Renviron')`", path))
}
if (Sys.getenv("aussiemaps_cache_dir") != "") {
cache_dir <- Sys.getenv("aussiemaps_cache_dir")
cache_dir <- path.expand(cache_dir)
} else {
cache_dir <- manage_cache_dir(path("aussiemaps"))
}
if (Sys.getenv("aussiemaps_cache_dir") != "") {
cache_dir <- Sys.getenv("aussiemaps_cache_dir")
cache_dir <- path.expand(cache_dir)
} else {
cache_dir <- manage_maps_cache_dir(path("aussiemaps"))
}
library(fs)
if (Sys.getenv("aussiemaps_cache_dir") != "") {
cache_dir <- Sys.getenv("aussiemaps_cache_dir")
cache_dir <- path.expand(cache_dir)
} else {
cache_dir <- manage_maps_cache_dir(path("aussiemaps"))
}
readRenviron('~/.Renviron')
file_loc <- file.path(cache_dir, str_c(aussiemaps_file,".zip"))
library(tidyverse)
file_loc <- file.path(cache_dir, str_c(aussiemaps_file,".zip"))
file_loc
file_loc
file_loc <- file.path(cache_dir, str_c(aussiemaps_file))
file_loc
cache_dir <- manage_maps_cache_dir(path("aussiemaps"))
cache_dir
cache_dir <- Sys.getenv("aussiemaps_cache_dir")
cache_dir <- path.expand(cache_dir)
cache_dir
cache_dir <- path.expand(cache_dir)
cache_dir
cache_dir <- Sys.getenv("aussiemaps_cache_dir")
cache_dir
file_loc <- file.path(cache_dir, str_c(aussiemaps_file))
file_loc
library(piggyback)
library(here)
library(fs)
library(tidyverse)
files_dir      <- here("data-raw","processed")
repo           <- "carlosyanez/aussiemaps"
version       <- "data"
files_list <- tibble(file=dir_ls(files_dir),
Year=str_remove(file,str_c(files_dir,"/")) %>% str_extract(.,"^[0-9]+"))
#create new release
pb_new_release(repo,version)
View(files_list)
# upload catalogue items ---
pb_upload(file=files_list$file,repo,version)
cache_dir <- aussiemaps::find_maps_cache()
local_repo <- path(cache_dir,"repo.parquet")
library(fs)
local_repo <- path(cache_dir,"repo.parquet")
local_repo
file_info(repo)
file_info(local_repo)
a<- file_info(local_repo)
age <- file_info(local_repo)$birth_time
age
now()
lubridate::now()
now <- lubridate::now()
lubridate::interval(age,now)
lubridate::interval(age,now)/lubridate::days(1)
units::set_units(1,"km^2")
units::set_units(1,km^2)
usethis::use_github_action_check_standard()
usethis::use_github_labels()
usethis::use_github_links()
#' Update list of files in repo
#' @importFrom piggyback pb_list
#' @importFrom arrow write_parquet
#' @importFrom fs path file_exists file_info
#' @importFrom lubridate now interval days
#' @noRd
get_repo_files <- function(){
cache_dir <-  find_maps_cache()
local_repo <- path(cache_dir,"repo.parquet")
if(file_exists(local_repo)){
creation <- file_info(local_repo)$birth_time
now <- now()
age <- interval(creation,now)/days(1)
if(age>1){
repo      <- pb_list("carlosyanez/aussiemaps")
write_parquet(repo,path(cache_dir,"repo.parquet"))
}else{
repo <- read_parquet(path(cache_dir,"repo.parquet"))
}
}else{
repo      <- pb_list("carlosyanez/aussiemaps")
write_parquet(repo,path(cache_dir,"repo.parquet"))
}
return(repo)
}
attribute_name <- "CD_CODE_2006"
areas_prop <- load_aussiemaps_parquet(attribute_name)
library(aussiemaps)
source("~/GitHub/aussiemaps/R/internal.R")
areas_prop <- load_aussiemaps_parquet(attribute_name)
library(tidyverse)
library(parquet)
library(arrow)
areas_prop <- load_aussiemaps_parquet(attribute_name)
library(piggyback)
areas_prop <- load_aussiemaps_parquet(attribute_name)
library(fst)
library(fs)
areas_prop <- load_aussiemaps_parquet(attribute_name)
areas_prop
areas_prop |> collect()
areas_prop |> collect() |> filter(prop!=1)
attribute_name <- "SA1_CODE_2021"
areas_prop <- load_aussiemaps_parquet(attribute_name)
areas_prop |> collect() |> filter(prop!=1)
library(here)
library(fs)
library(tidyverse)
files_dir      <- here("data-raw","processed")
library(piggyback)
files_dir      <- here("data-raw","processed")
repo           <- "carlosyanez/aussiemaps"
version       <- "data"
files_list <- tibble(file=dir_ls(files_dir),
Year=str_remove(file,str_c(files_dir,"/")) %>% str_extract(.,"^[0-9]+"))
#create new release
pb_new_release(repo,version)
# upload catalogue items ---
pb_upload(file=files_list$file,repo,version)
remotes:::install_github("carlosyanez/auscensus",force=TRUE)
:=
?:=
??:=
install.packages("sos")
library(sos)
findFn("str_replace")
findFn(":=")
