results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
results_i$new <- bigger_row
colnames(results_i)[which(colnames(results_i)=="new")]<- bigger_id
if(!exists("results")){
results <- results_i
}else{
results <- bind_rows(results_i,results)
}
}
return(results)
}
#from https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files
#location, layers ----
main        <- here("data-raw","source","ASGS_2021_Main_Structure_GDA2020.gpkg")
nonabs      <- here("data-raw","source","ASGS_Ed3_Non_ABS_Structures_GDA2020_updated_2022.gpkg")
indigenous  <- here("data-raw","source","ASGS_Ed3_2021_Indigenous_Structure_GDA2020.gpkg")
other       <- here("data-raw","source","ASGS_2021_SUA_UCL_SOS_SOSR_GPKG_GDA2020.gpkg")
main_layers       <- rgdal::ogrListLayers(main)
nonabs_layers     <- rgdal::ogrListLayers(nonabs)
indigenous_layers <- rgdal::ogrListLayers(indigenous)
other_layers      <- rgdal::ogrListLayers(other)
state <- "Victoria"
# get SA1s  ----
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020")
# Indigenous layers ----
#indigenous_layers
indigenous <- load_geo(indigenous, layer="ILOC_2021_AUST_GDA2020")
full_overlap <- full_coverage(base,
bigger=indigenous,
base_id="SA1_CODE_2021",
bigger_id="ILOC_CODE_2021")
bigger=indigenous
base_id="SA1_CODE_2021"
bigger_id="ILOC_CODE_2021"
bigger_row <-"20200703"
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
indexes
results_i$new <- bigger_row
full_coverage <-function(base,bigger,base_id,bigger_id){
bigger_ids <- bigger %>%
select(any_of(bigger_id)) %>%
st_drop_geometry() %>%
pull()
for(bigger_row in bigger_ids){
print(bigger_row)
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
if(nrow(results_i)>0){
results_i$new <- bigger_row
colnames(results_i)[which(colnames(results_i)=="new")]<- bigger_id
if(!exists("results")){
results <- results_i
}else{
results <- bind_rows(results_i,results)
}
}
}
return(results)
}
print(str_c(i, "out of ",length(bigger_ids)))
full_coverage <-function(base,bigger,base_id,bigger_id){
bigger_ids <- bigger %>%
select(any_of(bigger_id)) %>%
st_drop_geometry() %>%
pull()
i<-0
for(bigger_row in bigger_ids){
i=i+1
print(str_c(i, "out of ",length(bigger_ids)))
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
if(nrow(results_i)>0){
results_i$new <- bigger_row
colnames(results_i)[which(colnames(results_i)=="new")]<- bigger_id
if(!exists("results")){
results <- results_i
}else{
results <- bind_rows(results_i,results)
}
}
}
return(results)
}
full_overlap <- full_coverage(base,
bigger=indigenous,
base_id="SA1_CODE_2021",
bigger_id="ILOC_CODE_2021")
arrow::write_parquet(full_overlap,temp_file)
temp_file <- here("data-raw","temp_df.parquet")
arrow::write_parquet(full_overlap,temp_file)
# setup, aux ----
library(here)
library(fs)
library(sf)
library(tidyverse)
library(arrow)
load_geo <- function(file, layer){
st_read(file, layer = layer) %>%
filter(if_any(c("STATE_NAME_2021"), ~ .x==state)) %>%
select(-starts_with("AREA_ALBERS"))
}
full_coverage <-function(base,bigger,base_id,bigger_id){
bigger_ids <- bigger %>%
select(any_of(bigger_id)) %>%
st_drop_geometry() %>%
pull()
i<-0
for(bigger_row in bigger_ids){
i=i+1
print(str_c(i, " out of ",length(bigger_ids)))
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
if(nrow(results_i)>0){
results_i$new <- bigger_row
colnames(results_i)[which(colnames(results_i)=="new")]<- bigger_id
if(!exists("results")){
results <- results_i
}else{
results <- bind_rows(results_i,results)
}
}
}
return(results)
}
main        <- here("data-raw","source","ASGS_2021_Main_Structure_GDA2020.gpkg")
nonabs      <- here("data-raw","source","ASGS_Ed3_Non_ABS_Structures_GDA2020_updated_2022.gpkg")
indigenous  <- here("data-raw","source","ASGS_Ed3_2021_Indigenous_Structure_GDA2020.gpkg")
other       <- here("data-raw","source","ASGS_2021_SUA_UCL_SOS_SOSR_GPKG_GDA2020.gpkg")
main_layers       <- rgdal::ogrListLayers(main)
nonabs_layers     <- rgdal::ogrListLayers(nonabs)
indigenous_layers <- rgdal::ogrListLayers(indigenous)
other_layers      <- rgdal::ogrListLayers(other)
state <- "Victoria"
temp_file <- here("data-raw","temp_df.parquet")
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020")
indigenous <- load_geo(indigenous, layer="ILOC_2021_AUST_GDA2020")
full_overlap<-arrow::read_parquet(temp_file)
View(full_overlap)
base_renmant <- base  %>% filter(!(SA1_CODE_2021 %in% full_overlap$SA1_CODE_2021))
View(base_renmant)
base_renmant <- base  %>%
filter(!(SA1_CODE_2021 %in% full_overlap$SA1_CODE_2021)) %>%
select(SA1_CODE_2021)
a <- st_intersects(base_renmant,indigenous, sparse = TRUE)
View(a)
a <- st_intersects(base_renmant,indigenous, sparse = FALSE)
a
as.data.frame(a)
a <- st_intersects(base_renmant,indigenous, sparse = FALSE) %>% as.data.frame(.)
colnames(a) <- indigenous %>% select("ILOC_CODE_2021") %>% pull(.)
a
indigenous %>% select("ILOC_CODE_2021")
colnames(a) <- indigenous %>%
st_drop_geometry() %>%
select("ILOC_CODE_2021") %>% pull(.)
a
a$small <- base_renmant %>%
st_drop_geometry()%>%
select("SA1_CODE_2021") %>%
pull()
colnames(a)[which(colnames(a)=="small")] <- "SA1_CODE_2021"
a
a %>%
pivot_longer(-c("SA1_CODE_2021"),
names_to="ILOC_CODE_2021", values_to = "value")
a %>%
pivot_longer(-c("SA1_CODE_2021"),
names_to="ILOC_CODE_2021", values_to = "value") %>%
filter(value)
a <- a %>%
pivot_longer(-c("SA1_CODE_2021"),
names_to="ILOC_CODE_2021", values_to = "value") %>%
filter(value)
a
inter <- st_intersection(base_renmant,indigenous %>% filter("ILOC_CODE_2021" %in% unique(a$ILOC_CODE_2021)))
indigenous %>% filter("ILOC_CODE_2021" %in% unique(a$ILOC_CODE_2021)
)
indigenous %>% filter(ILOC_CODE_2021 %in% unique(a$ILOC_CODE_2021))
inter <- st_intersection(base_renmant,
indigenous %>% filter(ILOC_CODE_2021 %in% unique(a$ILOC_CODE_2021)))
inter <- st_intersection(base_renmant,
indigenous %>%
select(-STATE_CODE_2021,-STATE_NAME_2021,-AUS_CODE_2021,-AUS_NAME_2021,-ASGS_LOCI_URI_2021) %>%
filter(ILOC_CODE_2021 %in% unique(a$ILOC_CODE_2021)))
b <- base_renmant[1,]$SA1_CODE_2021
c <- a %>% filter(SA1_CODE_2021==b) %>% pull(ILOC_CODE_2021)
c
inter <- st_intersection(base_renmant[1,],
indigenous %>%
select(-STATE_CODE_2021,-STATE_NAME_2021,-AUS_CODE_2021,-AUS_NAME_2021,-ASGS_LOCI_URI_2021) %>%
filter(ILOC_CODE_2021 %in% b))
inter <- st_intersection(base_renmant[1,],
indigenous %>%
select(-STATE_CODE_2021,-STATE_NAME_2021,-AUS_CODE_2021,-AUS_NAME_2021,-ASGS_LOCI_URI_2021) %>%
filter(ILOC_CODE_2021 %in% c))
inter
ggplot(inter) + geom_sf()
ggplot(inter, aes(fill=ILOC_CODE_2021)) + geom_sf()
ggplot(inter[2,], aes(fill=ILOC_CODE_2021)) + geom_sf()
inter <- st_intersection(base_renmant[1,],
indigenous %>%
select(-STATE_CODE_2021,-STATE_NAME_2021,-AUS_CODE_2021,-AUS_NAME_2021,-ASGS_LOCI_URI_2021) %>%
filter(ILOC_CODE_2021 %in% c)) %>%
st_area()
inter
inter <- st_intersection(base_renmant[1,],
indigenous %>%
select(-STATE_CODE_2021,-STATE_NAME_2021,-AUS_CODE_2021,-AUS_NAME_2021,-ASGS_LOCI_URI_2021) %>%
filter(ILOC_CODE_2021 %in% c)) %>%
mutate(area=st_area()) %>%
filter(area>0)
inter <- st_intersection(base_renmant[1,],
indigenous %>%
select(-STATE_CODE_2021,-STATE_NAME_2021,-AUS_CODE_2021,-AUS_NAME_2021,-ASGS_LOCI_URI_2021) %>%
filter(ILOC_CODE_2021 %in% c))
inter$area <- inter %>% st_area()
inter
inter <- inter %>%  filter(area>0)
inter
inter <- inter %>%  filter(area>0)
inter$area <- inter %>% st_area() %>% as.numeric()
inter <- inter %>%  filter(area>0)
ggplot(inter[2,], aes(fill=ILOC_CODE_2021)) + geom_sf()
# setup, aux ----
library(here)
library(fs)
library(sf)
library(tidyverse)
library(arrow)
load_geo <- function(file, layer){
st_read(file, layer = layer) %>%
filter(if_any(c("STATE_NAME_2021"), ~ .x==state)) %>%
select(-starts_with("AREA_ALBERS"))
}
full_coverage <-function(base,bigger,base_id,bigger_id){
base_cols   <- colnames(base)
bigger_cols <- colnames(bigger)
remnant     <- bigger_cols[!(bigger_cols %in% base_cols)]
bigger_ids <- bigger %>%
select(any_of(remnant)) %>%
st_drop_geometry() %>%
pull()
i<-0
for(bigger_row in bigger_ids){
i=i+1
print(str_c(i, " out of ",length(bigger_ids)))
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
if(nrow(results_i)>0){
results_i$new <- bigger_row
colnames(results_i)[which(colnames(results_i)=="new")]<- bigger_id
if(!exists("results")){
results <- results_i
}else{
results <- bind_rows(results_i,results)
}
}
}
return(results)
}
#from https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files
#location, layers ----
main        <- here("data-raw","source","ASGS_2021_Main_Structure_GDA2020.gpkg")
nonabs      <- here("data-raw","source","ASGS_Ed3_Non_ABS_Structures_GDA2020_updated_2022.gpkg")
indigenous  <- here("data-raw","source","ASGS_Ed3_2021_Indigenous_Structure_GDA2020.gpkg")
other       <- here("data-raw","source","ASGS_2021_SUA_UCL_SOS_SOSR_GPKG_GDA2020.gpkg")
main_layers       <- rgdal::ogrListLayers(main)
nonabs_layers     <- rgdal::ogrListLayers(nonabs)
indigenous_layers <- rgdal::ogrListLayers(indigenous)
other_layers      <- rgdal::ogrListLayers(other)
state <- "Victoria"
temp_file <- here("data-raw","temp_df.parquet")
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020")
indigenous <- load_geo(indigenous, layer="ILOC_2021_AUST_GDA2020")
full_overlap <- full_coverage(base,
bigger=indigenous,
base_id="SA1_CODE_2021",
bigger_id="ILOC_CODE_2021")
bigger <- indigenous
base_id="SA1_CODE_2021"
bigger_id="ILOC_CODE_2021"
base_cols   <- colnames(base)
bigger_cols <- colnames(bigger)
remnant     <- bigger_cols[!(bigger_cols %in% base_cols)]
remnant
bigger_ids <- bigger %>%
select(any_of(remnant)) %>%
st_drop_geometry() %>%
pull()
bigger_ids <- bigger %>%
select(any_of(remnant)) %>%
st_drop_geometry() %>%
i<-0
bigger_ids <- bigger %>%
select(any_of(remnant)) %>%
st_drop_geometry()
bigger_ids
bigger_row <- bigger_ids[i,] %>% select(any_of(bigger_id)) %>% pull
i<-1
bigger_row <- bigger_ids[i,] %>% select(any_of(bigger_id)) %>% pull
print(str_c(i, " out of ",nrow(bigger_ids)))
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
indexes
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
results_i
results_i$new <- bigger_row
results_i
colnames(results_i)[which(colnames(results_i)=="new")]<- bigger_id
colnames
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
results_i
expand_grid(results_i,bigger_ids[i,])
results_i <- expand_grid(results_i,bigger_ids[i,])
View(results_i)
full_coverage <-function(base,bigger,base_id,bigger_id){
base_cols   <- colnames(base)
bigger_cols <- colnames(bigger)
remnant     <- bigger_cols[!(bigger_cols %in% base_cols)]
bigger_ids <- bigger %>%
select(any_of(remnant)) %>%
st_drop_geometry()
for(i in 1:nrow(bigger_ids)){
bigger_row <- bigger_ids[i,] %>% select(any_of(bigger_id)) %>% pull
print(str_c(i, " out of ",nrow(bigger_ids)))
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
if(nrow(results_i)>0){
results_i <- expand_grid(results_i,bigger_ids[i,])
if(!exists("results")){
results <- results_i
}else{
results <- bind_rows(results_i,results)
}
}
}
return(results)
}
intersections  <- function(base_renmant,bigger,base_id,bigger_id){
base_cols   <- colnames(base_renmant)
bigger_cols <- colnames(bigger)
remnant     <- bigger_cols[!(bigger_cols %in% base_cols)]
a <- st_intersects(base_renmant,bigger, sparse = FALSE) %>% as.data.frame(.)
colnames(a) <- bigger %>%
st_drop_geometry() %>%
select("ILOC_CODE_2021") %>% pull(.)
a$small <- base_renmant %>%
st_drop_geometry()%>%
select(any_of(base_id)) %>%
pull()
colnames(a)[which(colnames(a)=="small")] <- base_id
a <- a %>%
pivot_longer(-any_of(c(base_id)),
names_to=bigger_id, values_to = "value") %>%
filter(value)
b <- base_renmant[1,] %>% select(any_of(base_id)) %>% pull()
c <- a %>%
filter(if_any(base_id), ~ .x==b) %>%
select(any_of(bigger_id)) %>%
pull()
inter <- st_intersection(base_renmant[1,],
bigger %>%
select(any_of(base_renmant)) %>%
filter(if_any(bigger_id), ~ .x %in% c))
inter$area <- inter %>% st_area() %>% as.numeric()
inter <- inter %>%  filter(area>0)
return(inter)
}
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020")
library(tidyverse)
library(arrow)
load_geo <- function(file, layer){
st_read(file, layer = layer) %>%
filter(if_any(c("STATE_NAME_2021"), ~ .x==state)) %>%
select(-starts_with("AREA_ALBERS"))
}
full_coverage <-function(base,bigger,base_id,bigger_id){
base_cols   <- colnames(base)
bigger_cols <- colnames(bigger)
remnant     <- bigger_cols[!(bigger_cols %in% base_cols)]
bigger_ids <- bigger %>%
select(any_of(remnant)) %>%
st_drop_geometry()
for(i in 1:nrow(bigger_ids)){
bigger_row <- bigger_ids[i,] %>% select(any_of(bigger_id)) %>% pull
print(str_c(i, " out of ",nrow(bigger_ids)))
indexes <- st_covered_by(base ,
indigenous %>%  filter(if_any(c(bigger_id), ~ .x==bigger_row)),
sparse = FALSE)
results_i  <- base[indexes==TRUE,] %>%
select(any_of(c(base_id))) %>%
st_drop_geometry()
if(nrow(results_i)>0){
results_i <- expand_grid(results_i,bigger_ids[i,])
if(!exists("results")){
results <- results_i
}else{
results <- bind_rows(results_i,results)
}
}
}
return(results)
}
intersections  <- function(base_renmant,bigger,base_id,bigger_id){
base_cols   <- colnames(base_renmant)
bigger_cols <- colnames(bigger)
remnant     <- bigger_cols[!(bigger_cols %in% base_cols)]
a <- st_intersects(base_renmant,bigger, sparse = FALSE) %>% as.data.frame(.)
colnames(a) <- bigger %>%
st_drop_geometry() %>%
select("ILOC_CODE_2021") %>% pull(.)
a$small <- base_renmant %>%
st_drop_geometry()%>%
select(any_of(base_id)) %>%
pull()
colnames(a)[which(colnames(a)=="small")] <- base_id
a <- a %>%
pivot_longer(-any_of(c(base_id)),
names_to=bigger_id, values_to = "value") %>%
filter(value)
b <- base_renmant[1,] %>% select(any_of(base_id)) %>% pull()
c <- a %>%
filter(if_any(base_id), ~ .x==b) %>%
select(any_of(bigger_id)) %>%
pull()
inter <- st_intersection(base_renmant[1,],
bigger %>%
select(any_of(base_renmant)) %>%
filter(if_any(bigger_id), ~ .x %in% c))
inter$area <- inter %>% st_area() %>% as.numeric()
inter <- inter %>%  filter(area>0)
return(inter)
}
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020")
#location, layers ----
main        <- here("data-raw","source","ASGS_2021_Main_Structure_GDA2020.gpkg")
nonabs      <- here("data-raw","source","ASGS_Ed3_Non_ABS_Structures_GDA2020_updated_2022.gpkg")
indigenous  <- here("data-raw","source","ASGS_Ed3_2021_Indigenous_Structure_GDA2020.gpkg")
other       <- here("data-raw","source","ASGS_2021_SUA_UCL_SOS_SOSR_GPKG_GDA2020.gpkg")
main_layers       <- rgdal::ogrListLayers(main)
nonabs_layers     <- rgdal::ogrListLayers(nonabs)
indigenous_layers <- rgdal::ogrListLayers(indigenous)
other_layers      <- rgdal::ogrListLayers(other)
state <- "Victoria"
temp_file <- here("data-raw","temp_df.parquet")
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020")
indigenous <- load_geo(indigenous, layer="ILOC_2021_AUST_GDA2020")
full_overlap <- full_coverage(base,
bigger=indigenous,
base_id="SA1_CODE_2021",
bigger_id="ILOC_CODE_2021")
base <- base %>%
left_join(full_overlap,by="SA1_CODE_2021")
install.packages("sfarrow")
library(sfarrow)
base_file <- here("data-raw","temp_df.parquet")
base_file <- here("data-raw","base_sf.parquet")
st_write_parquet(base,base_file)
arrow::write_parquet(full_overlap,temp_file)
base_renmant
base
## The file provides structure from SA1-SA4- to australia, which builds up without overlaps
#main_layers
base <- load_geo(main, layer = "SA1_2021_AUST_GDA2020")
full_overlap <- full_coverage(base,
bigger=indigenous,
base_id="SA1_CODE_2021",
bigger_id="ILOC_CODE_2021")
