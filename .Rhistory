)
#aussie_map <-locations.table %>% load_map(aggregation="State")
aussie_map <- ozmap_data("states")
p <- ggplot() +
geom_sf(data=aussie_map,aes(geometry=geometry,fill=NAME),colour=NA,size=0) +
custom_map_theme(legend_pos = "none") +
scale_fill_manual(values=c(rep("#D22631",3),rep("#000000",3),rep("#FFC72C",3)))
height <- 1.6
s <- sticker(p, package="aussiemaps", p_size=6, s_x=1, s_y=.75, s_width=1.3*height, s_height=height,
h_color="#FFCD00", h_fill="#00843D",
filename=here("img","hexSticker.png"))
#https://www.ddrive.no/post/making-hex-and-twittercard-with-bunny-and-magick/
img_hex_gh <- image_read(here("img","hexSticker.png")) %>%
image_scale("400x400")
# https://www.pngfind.com/download/hobbwx_github-clipart-github-logo-github-hd-png-download/
gh_logo <- image_read(here("hex","gh.png")) %>%
image_scale("50x50")
bg_colour <-"#FFC72C"
gh <- image_canvas_ghcard(bg_colour) %>%
image_compose(img_hex_gh, gravity = "East", offset = "+100+0") %>%
image_annotate("aussiemaps", gravity = "West", location = "+100-30",
color="white", size=60, font="Aller", weight = 700) %>%
image_compose(gh_logo, gravity="West", offset = "+100+40") %>%
image_annotate("carlosyanez/aussiemaps", gravity="West", location="+160+45",
size=40, font="Ubuntu Mono",color="white") %>%
image_border_ghcard(bg_colour)
gh %>%
image_write(here::here("img", "bbox_ghcard.png"))
img_hex_gh <- image_read(here("img","hexSticker.png")) %>%
image_scale("400x400")
# https://www.pngfind.com/download/hobbwx_github-clipart-github-logo-github-hd-png-download/
gh_logo <- image_read(here("hex","gh.png")) %>%
image_scale("50x50")
bg_colour <-"#00843D"
gh <- image_canvas_ghcard(bg_colour) %>%
image_compose(img_hex_gh, gravity = "East", offset = "+100+0") %>%
image_annotate("aussiemaps", gravity = "West", location = "+100-30",
color="white", size=60, font="Aller", weight = 700) %>%
image_compose(gh_logo, gravity="West", offset = "+100+40") %>%
image_annotate("carlosyanez/aussiemaps", gravity="West", location="+160+45",
size=40, font="Ubuntu Mono",color="white") %>%
image_border_ghcard(bg_colour)
gh %>%
image_write(here::here("img", "bbox_ghcard.png"))
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse","sf","carlosyanez/aussiemaps","carlosyanez/customthemes","
osmdata","paletteer","openscilabs/ochRe","devtools","here")
#get regions
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse","sf","carlosyanez/aussiemaps","carlosyanez/customthemes","
osmdata","paletteer","openscilabs/ochRe","devtools","here")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
load_map(melb_inner1_filter,aggregation = "LGA")
aggregation = "LGA"
source('~/Google Drive/GitHub/aussiemaps/R/load_aussie_map.R')
clean_tolerance=0.05
filter_table <- melb_inner1_filter
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
pull(State_new) %>% unique(.)
data <- map_df(States,function(x){
datai<- loadRData(system.file("extdata", str_c(tolower(x),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
datai
})
x<- States
datai<- loadRData(system.file("extdata", str_c(tolower(x),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
data <- map_df(1:nrow(States),function(x){
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
States}
datai
},States)
data <- map_df(1:nrow(States),function(x){
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
States}
datai
},States)
data <- map_df(1:nrow(States),function(x){
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
States}
datai
},States)
x<-1
States[x,]$State_new
States[x,]$State_new
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
States}
datai
data <- map_df(1:nrow(States),function(x){
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
datai
},States)
data <- map_df(1:nrow(States),function(x){
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
datai
},States)
data <- map_df(1:nrow(States),function(x,States){
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
datai
},States)
data <- map_df(1:nrow(States),function(x,States){
datai<- loadRData(system.file("extdata", str_c(tolower(States[x,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
datai
},States)
rlang::last_trace()
nrow(States)
1:nrow(States)
#data <- map_df(1:nrow(States),function(x,States){
data <- tibble()
for(i in 1:nrow(States)){
datai<- loadRData(system.file("extdata", str_c(tolower(States[i,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
data <- bind_rows(data,datai)
}
rlang::last_error()
for(i in 1:nrow(States)){
datai<- loadRData(system.file("extdata", str_c(tolower(States[i,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
load_map <- function(filter_table,aggregation=c("none"), clean_tolerance=0.05){
###auxiliary function
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
#state.names <- loadRData(system.file("extdata", "state.rda", package = "aussiemaps"))
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
data <- tibble()
for(i in 1:nrow(States)){
datai<- loadRData(system.file("extdata", str_c(tolower(States[i,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
if(!(aggregation[1]=="none")){
data <- suppressMessages(suppressWarnings(data %>%
group_by_at(aggregation) %>%
summarise(.groups = "drop") %>%
clean_polygons(clean_tolerance)))
}
return(data)
}
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
View(melb_inner1)
library(aussiemaps)
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::reshelf("tidyverse","sf","carlosyanez/aussiemaps","carlosyanez/customthemes","
osmdata","paletteer","openscilabs/ochRe","devtools","here")
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::reshelf("tidyverse","sf","carlosyanez/aussiemaps","carlosyanez/customthemes","
osmdata","paletteer","openscilabs/ochRe","devtools","here")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1.centroid <- st_centroid(melb_inner1)
#works wiht pipes too
melb_inner2 <- tibble(LOCALITY=c("South Yarra"),State=c("VIC")) %>%
load_map()
melb_inner3 <- tibble(POA_CODE16=c("3004"),State=c("VIC")) %>%
load_map()
p1 <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
p1 <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
p1 <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
p1 <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
ggsave(here("img","map1.png"),p1)
#get regions
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
#get regions
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
get_region("The Riverina")
get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
#get regions
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
load_map <- function(filter_table,aggregation=c("none"), clean_tolerance=0.05){
###auxiliary function
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
#state.names <- loadRData(system.file("extdata", "state.rda", package = "aussiemaps"))
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
data <- tibble()
for(i in 1:nrow(States)){
datai<- loadRData(system.file("extdata", str_c(tolower(States[i,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
if(!(aggregation[1]=="none")){
data <- suppressMessages(suppressWarnings(data %>%
group_by_at(aggregation) %>%
summarise(.groups = "drop") %>%
clean_polygons(clean_tolerance)))
}
return(data)
}
#get regions
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
riverina <- get_region("The Riverina")
filter_table<- get_region("The Riverina")
aggregation=c("LGA","State","Region")
clean_tolerance=0.05
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
data <- tibble()
for(i in 1:nrow(States)){
datai<- loadRData(system.file("extdata", str_c(tolower(States[i,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
###auxiliary function
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
for(i in 1:nrow(States)){
datai<- loadRData(system.file("extdata", str_c(tolower(States[i,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
i <-1
datai<- loadRData(system.file("extdata", str_c(tolower(States[i,]$State_new),"_lga_loc_poa.rda"), package = "aussiemaps"))
States[i,]$State_new
States[i,]$State_new
States[i,]
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
States[i,]
States[i,]
States[i,]
States[i,]
States[i,]
View(States)
tates[i,]$State_new
tates[i,]$State_new
States[i,]$State_new
state <- States[i,1]
datai<- loadRData(system.file("extdata", str_c(tolower(state),"_lga_loc_poa.rda"), package = "aussiemaps"))
load_map <- function(filter_table,aggregation=c("none"), clean_tolerance=0.05){
}
#' @import dplyr
#' @import purrr
#' @import stringr
#' @import sf
#' @import tibble
#' @import lwgeom
#' @param filter_table table to filter (you can start with location_table)
#' @param aggregation name of column to aggregate (POA_CODE16, LOCALITY,LGA)
#' @param  clean_tolerance clean up tolerance
#' @export load_map
load_map <- function(filter_table,aggregation=c("none"), clean_tolerance=0.05){
###auxiliary function
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
#state.names <- loadRData(system.file("extdata", "state.rda", package = "aussiemaps"))
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
data <- tibble()
for(i in 1:nrow(States)){
state <- States[i,1]
datai<- loadRData(system.file("extdata", str_c(tolower(state),"_lga_loc_poa.rda"), package = "aussiemaps"))
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
if(!(aggregation[1]=="none")){
data <- suppressMessages(suppressWarnings(data %>%
group_by_at(aggregation) %>%
summarise(.groups = "drop") %>%
clean_polygons(clean_tolerance)))
}
return(data)
}
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
#get regions
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
#draw contour for filtering
riverina_contour <- riverina %>%
group_by(Region) %>% summarise(.groups = "drop") %>%
clean_polygons()
#get rivers from OSM
riverina_bbox <- st_bbox(riverina)
rivers <- opq(riverina_bbox) %>%
add_osm_feature(key = "waterway",
value = c("river","canal","creeks")) %>%
osmdata_sf()
rivers <- rbind(rivers$osm_lines %>% select(osm_id,name),
rivers$osm_multilines%>% select(osm_id,name)) %>%
st_transform(st_crs(riverina_contour)) %>%
st_intersection(riverina_contour)
#get regions
riverina <- get_region("The Riverina") %>% load_map(aggregation=c("LGA","State","Region"))
#draw contour for filtering
riverina_contour <- riverina %>%
group_by(Region) %>% summarise(.groups = "drop") %>%
clean_polygons()
#get rivers from OSM
riverina_bbox <- st_bbox(riverina)
rivers <- opq(riverina_bbox) %>%
add_osm_feature(key = "waterway",
value = c("river","canal","creeks")) %>%
osmdata_sf()
rivers <- rbind(rivers$osm_lines %>% select(osm_id,name),
rivers$osm_multilines%>% select(osm_id,name)) %>%
st_transform(st_crs(riverina_contour)) %>%
st_intersection(riverina_contour)
#plot
p2<- ggplot() +
geom_sf(data=riverina, aes(fill=LGA), colour="white", size=0.5) +
geom_sf(data=rivers,colour="blue",size=1.1)+
custom_map_theme()+
scale_fill_ochre()  +
labs(title="Rivers and Canals in The Riverina",
caption="Sources:data.gov.au (map), openstreetmap (rivers)")
ggsave(here("img","map2.png"),p2)
# load dataset from github
url <- "https://github.com/dipalira/Melbourne-Housing-Data-Kaggle/raw/master/Data/Melbourne_housing_FULL.csv"
melb_housing <- read_csv(url)
# get median price by suburb
melb_price <- melb_housing %>% filter(Type=="h") %>%
group_by(Suburb) %>%
summarise(medianprice=median(Price,na.rm=TRUE),.groups="drop")
#join get sf object and add median prices
Melbourne <- get_region("Greater Metropolitan Melbourne") %>%
load_map(aggregation=c("LOCALITY","Metro.Region")) %>%
left_join(melb_price,by=c("LOCALITY"="Suburb")) %>%
filter(Metro.Region %in% c("Inner Melbourne","Metropolitan Melbourne"))
#plot
p3<- Melbourne %>% ggplot() +
geom_sf(aes(fill=medianprice), colour="white", size=0.5) +
custom_map_theme()+
theme(legend.position = "right",
legend.direction = "vertical") +
scale_fill_gradient2(name="Median Price",
labels=function(x) format(x, big.mark = ",", scientific = FALSE)) +
labs(title="Median House Price in Melbourne's Housing Kaggle Dataset",
caption="Sources:data.gov.au (map), Github (data)")
ggsave(here("img","map3.png"),p3)
pkgdown::build_site()
ggsave(here("img","map3.png"),p3)
ggsave(here("img","map1.png"),p1)
ggsave(here("img","map1.png"),p1)
pkgdown::build_site()
