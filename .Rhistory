ungroup() %>%
mutate(prop=if_else(sum_area>units::set_units(0,m^2),
as.numeric(area/sum_area),
0)) %>%
rename(geo_col="col")
save_zip_parquet(struct_i,geo_col,here("data-raw","processed"))
}
}
}
geo_structure |>
relocate(id,.before=1) |>
select(-contains("\."))
geo_structure |>
relocate(id,.before=1) |>
select(-contains("\\."))
geo_structure |>
relocate(id,.before=1) |>
select(-contains("\\."))
geo_structure |>
relocate(id,.before=1) |>
select(-matches("\\."))
changes[i]
changes_i
library(tidyverse)
library(sf)
library(tidyverse)
library(sf)
library(arrow)
library(fs)
library(here)
library(zip)
library(piggyback)
library(rgdal)
library(aussiemaps)
source(here("R","internal.R"))
source(here("R","cache_management.R"))
source(here("data-raw","aux_save.R"))
source(here("data-raw","functions.R"))
cache_dir  <- find_maps_cache()
years <- c(2006,2011,2016,2021)
file_regex <- str_c("[0-9]{4}_[A-Z]{1}")
repo       <- read_parquet(path(cache_dir,"repo.parquet")) |>
mutate(across(c("file_name"), ~ str_remove_all(.x,"\\.zip"))) |>
select(any_of("file_name"))                                   |>
filter(if_any(c("file_name"), ~ str_detect(.x,file_regex)))   |>
pull()
changes <- rep(FALSE,length(years))
for(i in 1:length(years)){
year <- years[i]
repo_year <- repo[str_detect(repo,as.character(year))]
geo_structure <- NULL
changes_i <- FALSE
for(map in repo_year){
if(file_exists("C:/Users/carlo/OneDrive/Documents/.aussiemaps_cache/temp.gpkg")){
fs::file_delete("C:/Users/carlo/OneDrive/Documents/.aussiemaps_cache/temp.gpkg")}
map_i <- load_aussiemaps_gpkg(map)
#map_i <- st_read(path(cache_dir,str_c(map,".gpkg")))
map_i_id_1 <- map_i |> st_drop_geometry() |> head(1) |> pull(id)
if(str_detect(map_i_id_1,"-",TRUE)){
changes_i <- TRUE
state_col <- colnames(map_i)[str_detect(colnames(map_i),"STATE|STE")]
state_col <- state_col[str_detect(state_col,"CODE")]
state_col_pos <-which(colnames(map_i)==state_col)
state_code <- map_i[1,state_col_pos] |> st_drop_geometry() |> pull()
map_i <- map_i |>
mutate(id=str_c(state_code,"-",row_number())) |>
mutate(Year=year) |>
mutate(across(contains("CODE"),as.character))
file_gpkg <- str_c(map,".gpkg")
st_write(map_i,here("data-raw",file_gpkg),layer=map)
save_zip_gpkg(here("data-raw",file_gpkg),
here("data-raw"),
here("data-raw","processed"))
}
map_i$area <- st_area(map_i)
map_i <- map_i %>% st_drop_geometry()
geo_structure <- bind_rows(geo_structure,map_i)
if(changes_i){
changes[i] <- TRUE
}
}
if(changes[i]){
geo_structure <-  geo_structure |>
relocate(id,.before=1) |>
select(-matches("\\."))
save_zip_parquet(geo_structure,str_c(year,"_structure"),here("data-raw","processed"))
geo_cols <- colnames(geo_structure)
geo_cols <- geo_cols[str_detect(geo_cols,"CODE")]
attributes <- geo_structure[1,] %>%
select(-area,-Year) %>%
pivot_longer(-id,names_to="attributes",values_to = "value") %>%
select(attributes)
save_zip_parquet(attributes,str_c(year,"_attributes"),here("data-raw","processed"))
for(geo_col in geo_cols){
struct_i <- geo_structure %>%
filter(!is.na(area)) %>%
select(any_of(c(geo_col,"id","area"))) %>%
rename("col"=geo_col) %>%
group_by(col) %>%
mutate(sum_area = sum(area)) %>%
ungroup() %>%
mutate(prop=if_else(sum_area>units::set_units(0,m^2),
as.numeric(area/sum_area),
0)) %>%
rename(geo_col="col")
save_zip_parquet(struct_i,geo_col,here("data-raw","processed"))
}
}
}
geo_structure[1,] %>%
select(-area,-Year) %>%
pivot_longer(-id,names_to="attributes",values_to = "value") %>%
select(attributes
)
attributes <- geo_structure[1,] %>%
select(-area,-Year,-any_of(c("AREA_ALBERS_SQKM"))) %>%
pivot_longer(-id,names_to="attributes",values_to = "value") %>%
select(attributes)
save_zip_parquet(attributes,str_c(year,"_attributes"),here("data-raw","processed"))
for(geo_col in geo_cols){
struct_i <- geo_structure %>%
filter(!is.na(area)) %>%
select(any_of(c(geo_col,"id","area"))) %>%
rename("col"=geo_col) %>%
group_by(col) %>%
mutate(sum_area = sum(area)) %>%
ungroup() %>%
mutate(prop=if_else(sum_area>units::set_units(0,m^2),
as.numeric(area/sum_area),
0)) %>%
rename(geo_col="col")
save_zip_parquet(struct_i,geo_col,here("data-raw","processed"))
}
library(piggyback)
library(here)
library(fs)
library(tidyverse)
files_dir      <- here("data-raw","processed")
repo           <- "carlosyanez/aussiemaps"
version       <- "data"
files_list <- tibble(file=dir_ls(files_dir))
# upload catalogue items ---
pb_upload(file=files_list$file,repo,version)
source("~/GitHub/aussiemaps/R/internal.R")
library(auscensus)
library(aussiemaps)
library(dplyr)
library(tidyverse)
library(here)
library(sf)
library(leaflet)
library(arrow)
library(sf)
filters = list(GCCSA_NAME_2021="Greater Melbourne")
year=2021
aggregation = "SA2_NAME_2021"
metro_melbourne <- get_map(filters = list(GCCSA_NAME_2021="Greater Melbourne"),
year=2021)
filter_table=NULL
filter_table <- list_structure(year,filters)
cache_dir  <- find_maps_cache()
file_regex <- str_c(year,"_[A-Z]{1}")
repo_base      <- get_repo_files() |>
mutate(across(c("file_name"), ~ str_remove_all(.x,"\\.zip"))) |>
select(any_of("file_name"))
library(lubridate)
cache_dir  <- find_maps_cache()
file_regex <- str_c(year,"_[A-Z]{1}")
repo_base      <- get_repo_files() |>
mutate(across(c("file_name"), ~ str_remove_all(.x,"\\.zip"))) |>
select(any_of("file_name"))
repo      <- repo_base |>
filter(if_any(c("file_name"), ~ str_detect(.x,file_regex)))   |>
pull()
state_col <- colnames(filter_table)[str_detect(colnames(filter_table),"STATE|STE")]
state_col <- state_col[str_detect(state_col,"NAME")]
required_states <- filter_table |>
select(all_of(c(state_col))) |>
distinct() |>
mutate(across(all_of(as.vector(state_col)), ~ str_replace_all(.x," ","\\."))) |>
mutate(across(all_of(as.vector(state_col)), ~ str_c(year,"_",.x))) |>
filter(if_any(all_of(as.vector(state_col)), ~ .x %in% repo))           |>
pull()
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table)))
data_sf <- bind_rows(data_sf,data_i)
}
rm(data_i)
aggregation_prefix <- str_extract(aggregation,"^[^_]*")
aggregation_suffix <- str_extract(aggregation,"[0-9]{4}")
aggregation  <- repo_base |>
filter(if_any(c("file_name"), ~ str_detect(.x,aggregation_prefix))) |>
filter(if_any(c("file_name"), ~ str_detect(.x,as.character(aggregation_suffix)))) |>
filter(if_any(c("file_name"), ~ str_detect(.x,"CODE"))) |>
head(1) |>
pull()
aggregation <- as.vector(aggregation)
external_territories <- any(str_detect(required_states,"Other"))
if(external_territories){
data_sf_external  <- data_sf |> filter(if_any(as.vector(state_col), ~ str_detect(.x,"Other")))
data_sf           <- data_sf |> filter(if_any(as.vector(state_col), ~ str_detect(.x,"Other"),TRUE))
}
View(data_sf)
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-any_of(c("AREA_ALBERS_SQM"))) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
rm(data_i)
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-any_of(c("AREA_ALBERS_SQKM"))) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
rm(data_i)
cols_to_keep <-filter_table |>
mutate(across(everything(), as.character)) |>
select(-any_of(c("id","area","Year"))) |>
pivot_longer(-any_of(aggregation),values_to = "value",names_to = "geo_unit") |>
distinct() |>
group_by(across(all_of(c(aggregation,"geo_unit")))) |>
summarise(n=n(),.groups="drop") |>
group_by(across(all_of(c("geo_unit")))) |>
summarise(n=mean(n),.groups="drop") |>
filter(if_any(c("n"), ~ .x==1)) |>
select(any_of("geo_unit")) |>
distinct() |>
pull()
cols_to_keep
areas_prop <- load_aussiemaps_parquet(aggregation) |>
filter(if_any(c("id"), ~ .x %in% filter_table$id)) |>
collect() |>
group_by(across(c("geo_col")))   |>
summarise(across(any_of("prop"), ~ sum(.x)),.groups="drop")
areas_prop
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE)
))
data_sf |>ggplot() + geom_sf(fill="blue")
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-any_of(c("AREA_ALBERS_SQKM"))) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
rm(data_i)
data_sf |>ggplot() + geom_sf(fill="blue")
data_sf |> sf::st_drop_geometry() |> filter(is.na(SA2_NAME_2021))
data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2")
)
library(smoothr)
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
library(units)
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
use_s2()
simplification_factor=1
smoothing_threshold=1
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
join_key <- as.vector("geo_col")
names(join_key) <- aggregation
data_sf <- data_sf |>
left_join(areas_prop,by=join_key) |>
filter(if_any(c("prop"), ~  !is.na(.x)))
exists_name <- any(colnames(data_sf)==str_replace(aggregation,"_(.*?)CODE","_NAME"))
if(exists_name){
agg_label <- colnames(data_sf)[str_detect(colnames(data_sf),
str_replace(aggregation,"_(.*?)CODE","_NAME"))]
data_sf$label <- data_sf |>
select(any_of(as.vector(agg_label))) |>
st_drop_geometry() |>
pull()
data_sf <- data_sf |>
mutate(label=if_else(.data$prop==1,.data$label,str_c(.data$label, " (partial)")))
}
data_sf |>
ms_simplify(keep=simplification_factor)
library(rmapshaper)
data_sf |>
ms_simplify(keep=simplification_factor)
?tryCatch
#simplify
tryCatch(data_sf <- suppressMessages(suppressWarnings(
data_sf |>
ms_simplify(keep=simplification_factor))),
error = function(e) e)
data_sf |>ggplot() + geom_sf(fill="blue")
data_sf |>ggplot() + geom_sf(fill="blue")
source("~/GitHub/aussiemaps/R/get_map.R")
metro_melbourne <- get_map(filters = list(GCCSA_NAME_2021="Greater Melbourne"),
year=2021),
metro_melbourne <- get_map(filters = list(GCCSA_NAME_2021="Greater Melbourne"),
year=2021,
aggregation = "SA2_NAME_2021")
source("~/GitHub/aussiemaps/R/get_map.R")
metro_melbourne <- get_map(filters = list(GCCSA_NAME_2021="Greater Melbourne"),
year=2021,
aggregation = "SA2_NAME_2021")
catholic <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = metro_melbourne$SA2_CODE_2021,
selected_years = "2021")
metro_melbourne
metro_melbourne$SA2_CODE_2021
get_census_summary
catholic <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = metro_melbourne$SA2_CODE_2021,
selected_years = "2021")
catholic <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = metro_melbourne$SA2_CODE_2021,
selected_years = "2021")
pal <- colorBin("Blues", catholic$Value, 9, pretty = TRUE)
metro_melbourne %>%
left_join(catholic,by=c("SA2_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
fillColor = ~pal(Percentage),
label = ~paste0(SA2_NAME_2021, ": ", formatC(Percentage, big.mark = ","))) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
View(catholic)
list_census_attributes("14","[Ttotal")
list_census_attributes("14","[Tt]otal")
list_census_attributes("14","[Tt]otal*[Pe]rsons")
list_census_attributes("14","[Tt]otal") |> filter(str_detect(Attribute,"erson"))
list_census_attributes("14","[Tt]otal") |> filter(str_detect(Attribute,"erson"))
catholic <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = metro_melbourne$SA2_CODE_2021,
reference_total = list("Total"="Total_persons")
selected_years = "2021")
catholic <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = metro_melbourne$SA2_CODE_2021,
reference_total = list("Total"="Total_persons"),
selected_years = "2021")
catholic <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = metro_melbourne$SA2_CODE_2021,
reference_total = list("Total"="Total_persons"),
selected_years = "2021")
?get_census_summary
pal <- colorBin("Blues", catholic$Value, 9, pretty = TRUE)
metro_melbourne %>%
left_join(catholic,by=c("SA2_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
fillColor = ~pal(Percentage),
label = ~paste0(SA2_NAME_2021, ": ", formatC(Percentage, big.mark = ","))) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
catholic <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = metro_melbourne$SA2_CODE_2021,
reference_total = list("Total"="Total_persons"),
selected_years = "2021",
percentage_scale = 100
)
pal <- colorBin("Blues", catholic$Percentage, 9, pretty = TRUE)
metro_melbourne %>%
left_join(catholic,by=c("SA2_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
fillColor = ~pal(Percentage),
label = ~paste0(SA2_NAME_2021, ": ", formatC(Percentage, big.mark = ","))) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
?addPolygons
map <-metro_melbourne %>%
left_join(catholic,by=c("SA2_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
color ="white",
fillColor = ~pal(Percentage),
label = ~paste0(SA2_NAME_2021, ": ", formatC(Percentage, big.mark = ","))) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
map
map <-metro_melbourne %>%
left_join(catholic,by=c("SA2_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
color ="white", weight=10,
fillColor = ~pal(Percentage),
label = ~paste0(SA2_NAME_2021, ": ", formatC(Percentage, big.mark = ","))) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
map
map <-metro_melbourne %>%
left_join(catholic,by=c("SA2_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
color ="white", weight=10,
fillColor = ~pal(Percentage),
label = ~paste0(SA2_NAME_2021, ": ", formatC(Percentage, big.mark = ","),"%")) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
map
suburb <- get_map(filters = list(SAL_NAME_2021="Mount Waverley"),
year=2021,
aggregation = "SA1_NAME_2021")
source("~/GitHub/aussiemaps/R/get_map.R")
source("~/GitHub/aussiemaps/R/get_map.R")
suburb <- get_map(filters = list(SAL_NAME_2021="Mount Waverley"),
year=2021,
aggregation = "SA1_NAME_2021")
source("~/GitHub/aussiemaps/R/get_map.R")
suburb <- get_map(filters = list(SAL_NAME_2021="Mount Waverley"),
year=2021,
aggregation = "SA1_NAME_2021")
suburb
View(suburb)
catholic_burb <- get_census_summary("14",geo_structure="SA2",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = suburb$SA1_CODE_2021,
reference_total = list("Total"="Total_persons"),
selected_years = "2021",
percentage_scale = 100
)
map2 <-suburb %>%
left_join(catholic_burb,by=c("SA1_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
color ="white", weight=10,
fillColor = ~pal(Percentage),
label = ~paste0(SA1_NAME_2021, ": ", formatC(Percentage, big.mark = ","),"%")) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
map2 <-suburb %>%
left_join(catholic_burb,by=c("SA1_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
color ="white", weight=10,
fillColor = ~pal(Percentage),
label = ~paste0(SA1_CODE_2021, ": ", formatC(Percentage, big.mark = ","),"%")) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
map2
catholic_burb <- get_census_summary("14",geo_structure="SA1",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = suburb$SA1_CODE_2021,
reference_total = list("Total"="Total_persons"),
selected_years = "2021",
percentage_scale = 100
)
catholic_burb <- get_census_summary("14",geo_structure="SA1",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = suburb$SA1_CODE_2021,
reference_total = list("Total"="Total_persons"),
selected_years = "2021",
percentage_scale = 100
)
map2 <-suburb %>%
left_join(catholic_burb,by=c("SA1_CODE_2021"="Census_Code")) %>%
sf::st_transform('+proj=longlat +datum=WGS84') %>%
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.8,
color ="white", weight=10,
fillColor = ~pal(Percentage),
label = ~paste0(SA1_CODE_2021, ": ", formatC(Percentage, big.mark = ","),"%")) %>%
addLegend(pal = pal, values = ~Percentage, opacity = 1.0)
map2
catholic_burb <- get_census_summary("14",geo_structure="SA1",
attribute = list(Catholic =c("Christianity_catholic_persons")),
geo_unit_codes = suburb$SA1_CODE_2021,
reference_total = list("Total"="Total_persons"),
selected_years = "2021",
percentage_scale = 100
)
source("~/GitHub/aussiemaps/data-raw/tests.R")
