bigger_empty_label="UCL_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base <- base %>%
left_join(full_overlap |> distinct(),by="SA1_MAINCODE_2016") %>%
filter(!is.na(UCL_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
# SOS ----
ind <- load_geo(other, layer="section_of_state_2016") %>%
filter(STE_NAME_2016==state) %>%
select(-STE_CODE_2016,-STE_NAME_2016)
full_overlap <- full_coverage(base,
bigger=ind,
base_id="SA1_MAINCODE_2016",
bigger_id="SOS_CODE_2016")
overlapped <- full_overlap %>%
distinct(SA1_MAINCODE_2016) %>%
mutate(dummy=TRUE)
base_renmant <- base  %>%
left_join(overlapped,by="SA1_MAINCODE_2016") %>%
filter(is.na(dummy)) %>%
select(-dummy)
if(nrow(base_renmant)>0){
intersects <- intersections(base_renmant,
bigger=ind,
base_id="id",
bigger_id="SOS_CODE_2016",
base_empty_label="SA2_NAME_2016",
bigger_empty_label="SOS_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base <- base %>%
left_join(full_overlap |> distinct(),by="SA1_MAINCODE_2016") %>%
filter(!is.na(SOS_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
# SOSR ----
ind <- load_geo(other, layer="section_of_state_range_2016") %>%
filter(STE_NAME_2016==state) %>%
select(-STE_CODE_2016,-STE_NAME_2016)
full_overlap <- full_coverage(base,
bigger=ind,
base_id="SA1_MAINCODE_2016",
bigger_id="SOSR_CODE_2016")
overlapped <- full_overlap %>%
distinct(SA1_MAINCODE_2016) %>%
mutate(dummy=TRUE)
base_renmant <- base  %>%
left_join(overlapped,by="SA1_MAINCODE_2016") %>%
filter(is.na(dummy)) %>%
select(-dummy)
if(nrow(base_renmant)>0){
intersects <- intersections(base_renmant,
bigger=ind,
base_id="id",
bigger_id="SOSR_CODE_2016",
base_empty_label="SA2_NAME_2016",
bigger_empty_label="SOSR_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base <- base %>%
left_join(full_overlap |> distinct(),by="SA1_MAINCODE_2016") %>%
filter(!is.na(SOSR_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
#Tourism Regions -----
ind <- load_geo(nonabs, layer="tourism_region_2016") %>%
filter(STE_NAME_2016==state) %>%
select(-STE_CODE_2016,-STE_NAME_2016)
if(nrow(ind)>0){
full_overlap <- full_coverage(base,
bigger=ind,
base_id="SA1_MAINCODE_2016",
bigger_id="TR_CODE_2016")
overlapped <- full_overlap %>%
distinct(SA1_MAINCODE_2016) %>%
mutate(dummy=TRUE)
base_renmant <- base  %>%
left_join(overlapped,by="SA1_MAINCODE_2016") %>%
filter(is.na(dummy)) %>%
select(-dummy)
if(nrow(base_renmant)>0){
intersects <- intersections(base_renmant,
bigger=ind,
base_id="id",
bigger_id="TR_CODE_2016",
base_empty_label="SA2_NAME_2016",
bigger_empty_label="TR_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base <- base %>%
left_join(full_overlap |> distinct(),by="SA1_MAINCODE_2016") %>%
filter(!is.na(TR_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
}
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
# CED ----
if(exists("ceds_2016_out")){
base<-base %>%
left_join(ceds_2016_out,by="SA3_NAME_2016")
}else{
library(auspol)
divisions <- list_divisions(filters=list(StateAb=str_to_upper(state_short))) %>%
filter(`2016`) %>%
mutate(CED_NAME_2016=str_to_lower(DivisionNm),
CED_NAME_2016 = str_squish(CED_NAME_2016)) |>
distinct(CED_NAME_2016,DivisionNm)
ind <- load_geo(nonabs, layer="commonwealth_electoral_division_2016") %>%
mutate(CED_NAME_2016=str_to_lower(CED_NAME_2016),
CED_NAME_2016 = str_squish(CED_NAME_2016)) |>
left_join(divisions,by="CED_NAME_2016") |>
filter(!is.na(DivisionNm)) |>
mutate(CED_NAME_2016=DivisionNm,.keep="unused")
full_overlap <- full_coverage(base,
bigger=ind,
base_id="SA1_MAINCODE_2016",
bigger_id="CED_CODE_2016")
overlapped <- full_overlap %>%
distinct(SA1_MAINCODE_2016) %>%
mutate(dummy=TRUE)
base_renmant <- base  %>%
left_join(overlapped,by="SA1_MAINCODE_2016") %>%
filter(is.na(dummy)) %>%
select(-dummy)
if(nrow(base_renmant)>0){
intersects <- intersections(base_renmant,
bigger=ind,
base_id="id",
bigger_id="CED_CODE_2016",
base_empty_label="SA2_NAME_2016",
bigger_empty_label="CED_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base <- base %>%
left_join(full_overlap |> distinct(),by="SA1_MAINCODE_2016") %>%
filter(!is.na(CED_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
}
st_write_parquet(base,base_file)
sa1_nbr <- c(sa1_nbr,nrow(base))
rm(base_renmant,ced2021,intersects,full_overlap,non_matched)
#LGAs ----
ind <- load_geo(nonabs, layer="local_government_area_2016") %>%
filter(STE_NAME_2016==state) %>%
select(-STE_CODE_2016,-STE_NAME_2016)
full_overlap <- full_coverage(base,
bigger=ind,
base_id="SA1_MAINCODE_2016",
bigger_id="LGA_CODE_2016")
overlapped <- full_overlap %>%
distinct(SA1_MAINCODE_2016) %>%
mutate(dummy=TRUE)
base_renmant <- base  %>%
left_join(overlapped,by="SA1_MAINCODE_2016") %>%
filter(is.na(dummy)) %>%
select(-dummy)
if(nrow(base_renmant)>0){
intersects <- intersections(base_renmant,
bigger=ind,
base_id="id",
bigger_id="LGA_CODE_2016",
base_empty_label="SA2_NAME_2016",
bigger_empty_label="LGA_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base <- base %>%
left_join(full_overlap |> distinct(),by="SA1_MAINCODE_2016") %>%
filter(!is.na(LGA_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
ind <- load_geo(nonabs, layer="post_code_area_2016") %>%
filter(POA_CODE_2016 %in% as.character(poas_state))
full_overlap <- full_coverage(base,
bigger=ind,
base_id="id",
bigger_id="POA_CODE_2016")
full_overlap
overlapped <- full_overlap %>%
distinct(id) %>%
mutate(dummy=TRUE)
overlapped
base  %>%
left_join(overlapped,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
base_renmant <- base  %>%
left_join(overlapped,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
if(nrow(base_renmant)>0){
intersects <- intersections(base_renmant,
bigger=ind,
base_id="id",
bigger_id="POA_CODE_2016",
base_empty_label="SA2_NAME_2016",
bigger_empty_label="POA_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base2 <- base %>%
left_join(full_overlap |> distinct(),by="id") %>%
filter(!is.na(POA_CODE_2016))
base <- base %>%
left_join(full_overlap |> distinct(),by="id") %>%
filter(!is.na(POA_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
ind <- load_geo(nonabs, layer="state_suburb_2016") %>%
filter(STE_NAME_2016==state) %>%
select(-STE_CODE_2016,-STE_NAME_2016)
full_overlap <- full_coverage(base,
bigger=ind,
base_id="id",
bigger_id="SSC_CODE_2016")
full_overlap
overlapped <- full_overlap %>%
distinct(id) %>%
mutate(dummy=TRUE)
base_renmant <- base  %>%
left_join(overlapped,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
if(nrow(base_renmant)>0){
intersects <- intersections(base_renmant,
bigger=ind,
base_id="id",
bigger_id="SSC_CODE_2016",
base_empty_label="SA2_NAME_2016",
bigger_empty_label="SSC_NAME_2016"
)
intersected <- intersects %>%
distinct(id) %>%
mutate(dummy=TRUE)
non_matched <- base_renmant %>%
left_join(intersected,by="id") %>%
filter(is.na(dummy)) %>%
select(-dummy)
}else{
intersects <- base %>% filter(is.null(id))
non_matched <- base %>% filter(is.null(id))
}
base <- base %>%
left_join(full_overlap |> distinct(),by="id") %>%
filter(!is.na(SSC_CODE_2016))
base <- bind_rows(base,intersects,non_matched) %>%
mutate(id=row_number())
sa1_nbr <- c(sa1_nbr,nrow(base))
st_write_parquet(base,base_file)
rm(base_renmant,ind,intersects,full_overlap,overlapped,intersected,non_matched)
base <- base |> st_make_valid()
base <- bind_rows(data_base |> select(-id),
base |> select(-id))
base |>
leaflet() |>
addTiles() |>
addPolygons()
a <- st_difference(a,base)
a <- st_difference(a,base)
library(tidyverse)
library(sf)
library(fs)
library(arrow)
library(leaflet)
library(aussiemaps)
library(sfarrow)
library(auspol)
library(here)
source(here("data-raw","functions.R"))
source(here("R","internal.R"))
dont_write <- TRUE
main        <- here("data-raw","source","asgs2016absstructuresmainstructureandgccsa.gpkg")
nonabs      <- here("data-raw","source","asgs2016nonabsstructures.gpkg")
nonabs2018  <- here("data-raw","source","asgs2016nonabsstructures.gpkg")
indigenous  <- here("data-raw","source","asgs2016absstructuresindigenousstructure.gpkg")
other       <- here("data-raw","source","asgs2016absstructuressignificanturbanareasurbancentresandlocalitiessectionofstate.gpkg")
main_layers       <- rgdal::ogrListLayers(main)
nonabs_layers     <- rgdal::ogrListLayers(nonabs)
indigenous_layers <- rgdal::ogrListLayers(indigenous)
other_layers      <- rgdal::ogrListLayers(other)
temp_file <- here("data-raw","temp_df.parquet")
base_file <- here("data-raw","base_sf3.parquet")
ced_file <- here("data-raw","source","divisions-Aug-2016-by-2016-SA1")
threshold <-0
## South Australia ----
state       <- "South Australia"
state_short <- "Sa"
poas_state <- c(5000:5799,0872)
ceds_2018 <- auspol::list_divisions(filters=list(StateAb="SA",`2016`=TRUE)) %>% pull(DivisionNm)
data_base <- load_aussiemaps_gpkg("2016_South.Australia")
b         <-  load_geo(main, layer = "statistical_area_level_1_2016") |>
filter(STE_NAME_2016==state)
b$empty <- b |> st_is_empty()
b <- b |> filter(!empty) |> select(-empty)
base <- NULL
for(i in 1:nrow(b)){
sa1 <- b[i,]
sa_code <- sa1 |> st_drop_geometry() |> pull(SA1_MAINCODE_2016 )
existing <- data_base |> filter(SA1_MAINCODE_2016 ==sa_code)
existing <- tibble(a="sa_code",geom=st_union(existing)) |>
st_as_sf() |>
smoothr::fill_holes(units::set_units(1,"km^2"))
tryCatch({
base_i <- st_difference(sa1,existing)
base_i <- st_cast(base_i, "POLYGON")
base_i$area <- st_area(base_i)
base_i <- base_i |> filter(area > units::set_units(100,"m^2"))
message(glue::glue("{i} out of {nrow(b)}: {sa_code}. {nrow(base_i)} features"))
if(is.null(base)){
base <- base_i
}else{
base <- bind_rows(base,base_i)
}
},
error=function(e){message("didnt work")})
}
base <- base[st_is(base |> st_make_valid(),c("POLYGON","MULTIPOLYGON")),]
base <- base |> select(-a,-area)
keep_vars <- unique(c(ls(),"keep_vars"))
base |>
leaflet() |>
addTiles() |>
addPolygons()
base |>
bind_rows(data_base) |>
leaflet() |>
addTiles() |>
addPolygons()
base |>
bind_rows(data_base) |>
leaflet() |>
addTiles() |>
addPolygons()
data_base) |>
data_base |>
leaflet() |>
addTiles() |>
addPolygons()
base <- base |> rename("geom"="shape")
data_base |>
bind_rows(base)
data_base |>
bind_rows(base) |>
leaflet() |>
addTiles() |>
addPolygons()
data_base |>
leaflet() |>
addTiles() |>
addPolygons() |>
addPolygons(data=base,fillColor = "orange")
data_base <- load_aussiemaps_gpkg("2016_South.Australia")
b         <-  load_geo(main, layer = "statistical_area_level_1_2016") |>
filter(STE_NAME_2016==state)
b |>
leaflet() |>
addTiles() |>
addPolygons()
b |> filter(!(SA1_MAINCODE_2016 %in% data_base$SA1_MAINCODE_2016))
b$empty <- b |> st_is_empty()
b <- b |> filter(!empty) |> select(-empty)
base <- NULL
for(i in 1:nrow(b)){
sa1 <- b[i,]
sa_code <- sa1 |> st_drop_geometry() |> pull(SA1_MAINCODE_2016 )
existing <- data_base |> filter(SA1_MAINCODE_2016 ==sa_code)
existing <- tibble(a="sa_code",geom=st_union(existing)) |>
st_as_sf() |>
smoothr::fill_holes(units::set_units(1,"km^2"))
tryCatch({
base_i <- st_difference(sa1,existing)
base_i <- st_cast(base_i, "POLYGON")
base_i$area <- st_area(base_i)
base_i <- base_i |> filter(area > units::set_units(100,"m^2"))
message(glue::glue("{i} out of {nrow(b)}: {sa_code}. {nrow(base_i)} features"))
if(is.null(base)){
base <- base_i
}else{
base <- bind_rows(base,base_i)
}
},
error=function(e){message("didnt work")})
}
i<-9
sa1 <- b[i,]
sa1|>
leaflet() |>
addTiles() |>
addPolygons()
b |>
leaflet() |>
addTiles() |>
addPolygons(popup = ~SA1_MAINCODE_2016)
sa1 <- b |> filter(SA1_MAINCODE_2016=="40601113407")
sa_code <- sa1 |> st_drop_geometry() |> pull(SA1_MAINCODE_2016 )
existing <- data_base |> filter(SA1_MAINCODE_2016 ==sa_code)
existing
existing |>
leaflet() |>
addTiles() |>
addPolygons(popup = ~SA1_MAINCODE_2016)
sa1 |>
leaflet() |>
addTiles() |>
addPolygons(popup = ~SA1_MAINCODE_2016)
existing <- tibble(a="sa_code",geom=st_union(existing)) |>
st_as_sf() |>
smoothr::fill_holes(units::set_units(1,"km^2"))
base_i <- st_difference(sa1,existing)
base_i <- st_intersection(sa1,existing)
base_i <- st_difference(sa1,base_i)
?st_difference
base_i <- st_snap(sa1,base_i)
base_i <- st_difference(base_i,sa1)
sa1 <- sa1 |> st_make_valid()
base_i |>
leaflet() |>
addTiles() |>
addPolygons(popup = ~SA1_MAINCODE_2016)
base_i <- st_difference(existing,sa1)
base_i <- st_difference(sa1,existing)
