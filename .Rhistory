download.file("https://github.com/carlosyanez/aussiemaps/raw/master/inst/extdata/act_lga_loc_poa.rda",str_c(system.file("extdata", package = "aussiemaps"),"act_lga_loc_poa.rda"))
file.exists(system.file("extdata", "act_lga_loc_poa.rda", package = "aussiemaps"))
file.exists(system.file("extdata", "act_lga_loc_poa.rda", package = "aussiemaps"))
library(aussiemaps)
library(aussiemaps)
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
library(tidyverse)
library(sf)
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
View(melb_inner1_filter)
aussiemaps.data::loadsfdata("VIC")
aggregation=c("none")
clean_tolerance=0.05
filter_table <- melb_inner1_filter
States  <- filter_table %>% select(State) %>%
left_join(state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
data <- tibble()
i<-1
state <- States[i,1]
States[i,1]
datai<- aussiemaps.data::loadsfdata(state)
View(datai)
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
for(i in 1:nrow(States)){
state <- States[i,1]
datai<- aussiemaps.data::loadsfdata(state)
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
if(!(aggregation[1]=="none")){
data <- suppressMessages(suppressWarnings(data %>%
group_by_at(aggregation) %>%
summarise(.groups = "drop") %>%
clean_polygons(clean_tolerance)))
}
return(data)
data
library(aussiemaps)
library(aussiemaps)
library(tidyverse)
library(sf)
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "none")
library(aussiemaps)
library(aussiemaps)
library(aussiemaps)
library(aussiemaps)
library(tidyverse)
library(sf)
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1
melb_inner1.centroid <- st_centroid(melb_inner1)
#works wiht pipes too
melb_inner2 <- tibble(LOCALITY=c("South Yarra"),State=c("VIC")) %>%
load_map()
melb_inner3 <- tibble(POA_CODE16=c("3004"),State=c("VIC")) %>%
load_map()
p <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
library(ochRe)
ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
library(customthemes)
ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
usethis::use_vignette("my-vignette")
install.packages("lwgeom")
library(aussiemaps)
vignette("aussiemaps")
devtools::build_vignettes()
vignette("aussiemaps_howto")
usethis::use_vignette("aussiemaps")
devtools::build_vignettes()
vignette("aussiemaps")
vignette(package=aussiemaps)
?aussiemaps
??aussiemaps
browseVignettes()
library(aussiemaps)
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
browseVignettes()
library(aussiemaps)
vignette("How to use aussiemaps")
tools::buildVignettes(dir = ".", tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
dir.create("inst/doc")
dir.create("inst/doc")
dir.create(here::here("inst/doc"))
fs::dir_create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
devtools::build_vignettes()
devtools::build(vignettes=TRUE)
usethis::git_vaccinate()
browseVignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
library(aussiemaps)
devtools::install_github("carlosyanez/aussiemaps.data")
devtools::build_vignettes()
pkgdown::build_site()
usethis::use_github_action("lint")
install.packages("lint")
install.packages("usethis")
usethis::use_github_action("lint")
usethis::use_github_action("check-release")
use_github_actions_badge("check-release")
usethis::use_github_actions_badge("check-release")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","openscilabs/ochRe","devtools","here",
"echarts4r","geojsonsf")
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","hollylkirk/ochRe","devtools","here",
"echarts4r","geojsonsf")
devtools::install_github("ropenscilabs/ochRe")
install.packages("quarto")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","ropenscilabs/ochRe","devtools","here",
"echarts4r","geojsonsf")
install.packages("tidyr")
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","ropenscilabs/ochRe","devtools","here",
"echarts4r","geojsonsf")
install.packages("tidyverse")
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","ropenscilabs/ochRe","devtools","here",
"echarts4r","geojsonsf")
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","ropenscilabs/ochRe","devtools","here",
"echarts4r","geojsonsf")
install.packages("sp","osmdata")
install.packages("sp")
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","ropenscilabs/ochRe","devtools","here",
"echarts4r","geojsonsf")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
library(aussiemaps)
renv::activate()
install.packages("renv")
renv::activate(bare=TRUE)
renv::init(bare=TRUE)
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","ropenscilabs/ochRe","devtools","here")
remove.packages(aussiemaps)
remove.packages("aussiemaps")
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"sf",
"carlosyanez/aussiemaps",
"carlosyanez/customthemes","
osmdata","paletteer","ropenscilabs/ochRe","devtools","here")
renv::snapshot()
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1.centroid <- st_centroid(melb_inner1)
#works wiht pipes too
melb_inner2 <- tibble(LOCALITY=c("South Yarra"),State=c("VIC")) %>%
load_map()
melb_inner3 <- tibble(POA_CODE16=c("3004"),State=c("VIC")) %>%
load_map()
p1 <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
View(p1)
p1
renv::deactivate()
install.packages("rmapshaper")
install.packages()
?as
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
library("tidyverse")
library("sf")
library("aussiemaps")
library("customthemes")
library("osmdata")
library("paletteer")
library("ochRe")
library("devtools")
library("here")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
?as
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
library("tidyverse")
library("sf")
library("aussiemaps")
library("customthemes")
library("osmdata")
library("paletteer")
library("ochRe")
library("devtools")
library("here")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  load_map(melb_inner1_filter,aggregation = "LGA")
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
library("tidyverse")
library("sf")
library("aussiemaps")
library("customthemes")
library("osmdata")
library("paletteer")
library("ochRe")
library("devtools")
library("here")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  get_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1.centroid <- st_centroid(melb_inner1)
#works with pipes too
melb_inner2 <- tibble(LOCALITY=c("South Yarra"),State=c("VIC")) %>%
get_map()
melb_inner3 <- tibble(POA_CODE16=c("3004"),State=c("VIC")) %>%
get_map()
p1 <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
p1
melb_inner1 <-  get_map(melb_inner1_filter,aggregation = "LGA")
aggregation <- "LGA"
clean_tolerance=0.05,simplify=TRUE)
clean_tolerance=0.05
simplify=TRUE
filter_table <- melb_inner1_filter
States  <- filter_table %>% select(State) %>%
left_join(aussiemaps.data::state.names,by="State") %>%
mutate(State_new=if_else(!is.na(State_short),State_short,State)) %>%
distinct(State_new)
data <- tibble()
#get shapes from each state/territory into data
for(i in 1:nrow(States)){
state <- States[i,1]
datai<- aussiemaps.data::loadsfdata(state)
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
aggregation <- c(aggregation)
aggregation[1]
sf::sf_use_s2(FALSE)
data <- suppressMessages(suppressWarnings(data %>%
group_by(across(starts_with(aggregation))) %>%
summarise(.groups = "drop") %>%
clean_polygons(clean_tolerance)))
data <- rmapshaper::ms_simplify(input = methods::as(data, 'Spatial')) %>%
sf::st_as_sf()
st_crs(data)
data <- tibble()
#get shapes from each state/territory into data
for(i in 1:nrow(States)){
state <- States[i,1]
datai<- aussiemaps.data::loadsfdata(state)
data_cols <- colnames(as.data.frame(datai) %>% select(-State,-geometry))
cols_filter <- colnames(filter_table %>% select(any_of(data_cols)))
if(length(cols_filter)>0){
datai <- suppressMessages(suppressWarnings(datai %>% inner_join(filter_table %>% select(-State), by=cols_filter)))
}
if(nrow(data)==0){
data <-datai
}else{
data <- bind_rows(data,datai)
}
}
#coerce into c()
aggregation <- c(aggregation)
if(!(aggregation[1]=="none")){
sf::sf_use_s2(FALSE)
data <- suppressMessages(suppressWarnings(data %>%
group_by(across(starts_with(aggregation))) %>%
summarise(.groups = "drop") %>%
clean_polygons(clean_tolerance)))
}
crs <- st_crs(data)
st_crs(data) <- crs
data2 <- rmapshaper::ms_simplify(input = methods::as(data, 'Spatial')) %>%
sf::st_as_sf()
data2 <- rmapshaper::ms_simplify(input = methods::as(data, 'Spatial'))
st_crs(data2)
data2 <- rmapshaper::ms_simplify(input = methods::as(data, 'Spatial')) %>%
sf::st_as_sf()
st_crs(data2)
rmapshaper::ms_simplify(data)
data2 <- rmapshaper::ms_simplify(data) %>%
sf::st_as_sf()
data2 <- rmapshaper::ms_simplify(data) %>%
sf::st_as_sf()
usethis::use_build_ignore(c("hex", "img","docs"))
library(aussiemaps)
knitr::opts_chunk$set(eval = FALSE, include = FALSE)
options(repos="https://cran.rstudio.com" )
#load packages
library("tidyverse")
library("sf")
library("aussiemaps")
library("customthemes") # https://carlosyanez.github.io/customthemes/
library("osmdata")
library("paletteer")
library("ochRe")
library("here")
melb_inner1_filter<- tibble(LGA=c("Melbourne","Port Phillip","Stonnington"),State=rep("VIC",3))
melb_inner1 <-  get_map(melb_inner1_filter,aggregation = "LGA")
melb_inner1.centroid <- st_centroid(melb_inner1)
#works with pipes too
melb_inner2 <- tibble(LOCALITY=c("South Yarra"),State=c("VIC")) %>%
get_map()
melb_inner3 <- tibble(POA_CODE16=c("3004"),State=c("VIC")) %>%
get_map()
p1 <- ggplot() +
geom_sf(data=melb_inner1,colour="white",size=1.2,fill="grey") +
geom_sf(data=melb_inner2,aes(fill=LOCALITY),alpha=0.8,colour="white",size=0.8) +
geom_sf(data=melb_inner3,aes(fill=POA_CODE16),alpha=0.8,colour="white",size=0.8) +
geom_sf_text(data = melb_inner1.centroid, aes(label = LGA), colour = "blue") +
scale_fill_ochre("lorikeet") +
custom_map_theme() +
labs(title="Arbitrary selection of South Yarra and Postal Area 3004",
caption="Sources:data.gov.au, ABS")
p1
#get regions
riverina <- get_region("The Riverina") %>% get_map(aggregation=c("LGA","State","Region"))
#draw contour for filtering
riverina_contour <- riverina %>%
group_by(Region) %>% summarise(.groups = "drop") %>%
clean_polygons()
#get rivers from OSM
riverina_bbox <- st_bbox(riverina)
rivers <- opq(riverina_bbox) %>%
add_osm_feature(key = "waterway",
value = c("river","canal","creeks")) %>%
osmdata_sf()
rivers <- rbind(rivers$osm_lines %>% select(osm_id,name),
rivers$osm_multilines%>% select(osm_id,name)) %>%
st_transform(st_crs(riverina_contour)) %>%
st_intersection(riverina_contour)
#plot
p2<- ggplot() +
geom_sf(data=riverina, aes(fill=LGA), colour="white", size=0.5) +
geom_sf(data=rivers,colour="blue",size=1.1)+
custom_map_theme()+
scale_fill_ochre()  +
labs(title="Rivers and Canals in The Riverina",
caption="Sources:data.gov.au (map), openstreetmap (rivers)")
ggsave(here("img","map1.png"),p1)
# load dataset from github
url <- "https://github.com/dipalira/Melbourne-Housing-Data-Kaggle/raw/master/Data/Melbourne_housing_FULL.csv"
melb_housing <- read_csv(url)
# get median price by suburb
melb_price <- melb_housing %>% filter(Type=="h") %>%
group_by(Suburb) %>%
summarise(medianprice=median(Price,na.rm=TRUE),.groups="drop")
#join get sf object and add median prices
Melbourne <- get_region("Greater Metropolitan Melbourne") %>%
get_map(aggregation=c("LOCALITY","Metro.Region")) %>%
left_join(melb_price,by=c("LOCALITY"="Suburb")) %>%
filter(Metro.Region %in% c("Inner Melbourne","Metropolitan Melbourne"))
#plot
p3<- Melbourne %>% ggplot() +
geom_sf(aes(fill=medianprice), colour="white", size=0.5) +
custom_map_theme()+
theme(legend.position = "right",
legend.direction = "vertical") +
scale_fill_gradient2(name="Median Price",
labels=function(x) format(x, big.mark = ",", scientific = FALSE)) +
labs(title="Median House Price in Melbourne's Housing Kaggle Dataset",
caption="Sources:data.gov.au (map), Github (data)")
pkgdown::build_site()
pkgdown::build_site()
