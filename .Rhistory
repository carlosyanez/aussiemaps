areas_prop <- load_aussiemaps_parquet(aggregation) |>
filter(if_any(c("id"), ~ .x %in% filter_table$id)) |>
collect() |>
group_by(across(c("geo_col")))   |>
summarise(across(any_of("prop"), ~ sum(.x)),.groups="drop")
sf_use_s2(FALSE)
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
library(smoothr)
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
libary(units)
library(units)
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
smoothing_threshold=4
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
cols_to_merge <- colnames(filter_table)
c("SA1_CODE_2021")
aggregation <- as.vector(aggregation)
for(i in 1:length(aggregation)){
aggregation_prefix <- str_extract(aggregation[i],"^[^_]*")
aggregation_suffix <- str_extract(aggregation[i],"[0-9]{4}")
aggregation[i]  <- repo_base |>
filter(if_any(c("file_name"), ~ str_detect(.x,aggregation_prefix))) |>
filter(if_any(c("file_name"), ~ str_detect(.x,as.character(aggregation_suffix)))) |>
filter(if_any(c("file_name"), ~ str_detect(.x,"CODE"))) |>
head(1) |>
pull()
}
external_territories <- any(str_detect(required_states,"Other"))
if(external_territories){
data_sf_external  <- data_sf |> filter(if_any(as.vector(state_col), ~ str_detect(.x,"Other")))
data_sf           <- data_sf |> filter(if_any(as.vector(state_col), ~ str_detect(.x,"Other"),TRUE))
}
cols_to_keep <-filter_table |>
mutate(across(everything(), as.character)) |>
select(-any_of(c("id","area","Year"))) |>
pivot_longer(-any_of(aggregation),values_to = "value",names_to = "geo_unit") |>
distinct() |>
group_by(across(all_of(c(aggregation,"geo_unit")))) |>
summarise(n=n(),.groups="drop") |>
group_by(across(all_of(c("geo_unit")))) |>
summarise(n=mean(n),.groups="drop") |>
filter(if_any(c("n"), ~ .x==1)) |>
select(any_of("geo_unit")) |>
distinct() |>
pull()
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
external_territories <- any(str_detect(required_states,"Other"))
if(external_territories){
data_sf_external  <- data_sf |> filter(if_any(as.vector(state_col), ~ str_detect(.x,"Other")))
data_sf           <- data_sf |> filter(if_any(as.vector(state_col), ~ str_detect(.x,"Other"),TRUE))
}
cols_to_keep <-filter_table |>
mutate(across(everything(), as.character)) |>
select(-any_of(c("id","area","Year"))) |>
pivot_longer(-any_of(aggregation),values_to = "value",names_to = "geo_unit") |>
distinct() |>
group_by(across(all_of(c(aggregation,"geo_unit")))) |>
summarise(n=n(),.groups="drop") |>
group_by(across(all_of(c("geo_unit")))) |>
summarise(n=mean(n),.groups="drop") |>
filter(if_any(c("n"), ~ .x==1)) |>
select(any_of("geo_unit")) |>
distinct() |>
pull()
cols_to_merge <- cols_to_merge[!(cols_to_merge %in% c(cols_to_keep,aggregation))]
cols_to_keep <-filter_table |>
mutate(across(everything(), as.character)) |>
select(-any_of(c("id","area","Year"))) |>
pivot_longer(-any_of(aggregation),values_to = "value",names_to = "geo_unit") |>
distinct() |>
group_by(across(all_of(c(aggregation,"geo_unit")))) |>
summarise(n=n(),.groups="drop") |>
group_by(across(all_of(c("geo_unit")))) |>
summarise(n=mean(n),.groups="drop") |>
filter(if_any(c("n"), ~ .x==1)) |>
select(any_of("geo_unit")) |>
distinct() |>
pull()
cols_to_merge
aggregation=c("POA_CODE_2021")
cols_to_keep <-filter_table |>
mutate(across(everything(), as.character)) |>
select(-any_of(c("id","area","Year"))) |>
pivot_longer(-any_of(aggregation),values_to = "value",names_to = "geo_unit") |>
distinct() |>
group_by(across(all_of(c(aggregation,"geo_unit")))) |>
summarise(n=n(),.groups="drop") |>
group_by(across(all_of(c("geo_unit")))) |>
summarise(n=mean(n),.groups="drop") |>
filter(if_any(c("n"), ~ .x==1)) |>
select(any_of("geo_unit")) |>
distinct() |>
pull()
cols_to_keep <- c(cols_to_keep,"Year")
cols_to_merge <- colnames(filter_table)
cols_to_merge <- cols_to_merge[!(cols_to_merge %in% c(cols_to_keep,aggregation))]
cols_to_merge
cols_to_merge <- colnames(filter_table)
cols_to_merge <- cols_to_merge[!(cols_to_merge %in% c(cols_to_keep,aggregation,"id","area"))]
cols_to_merge
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(across(any_of(cols_to_merge), ~ str_c(.x,collapse=", ")),.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
cols_to_merge
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(across(any_of(cols_to_merge), ~ str_c(unique(.x),collapse=", ")),.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(across(any_of(cols_to_merge), ~ str_c(distinct(.x),collapse=", ")),.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
?str_c
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(across(any_of(cols_to_merge), ~ str_flatten_comma(.x,collapse=", ")),.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(across(any_of(cols_to_merge), ~ str_flatten_comma(.x)),.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(,.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
col_to_keep <- cols_to_keep[1]
col_to_merge <- cols_to_merge[1]
filter_table |>
select(any_of(c(aggregation,cols_to_keep,col_to_merge))) |>
distinct()                                               |>
group_by(across(c(aggregation,cols_to_keep)))            |>
summarise(across(any_of(col_to_merge), ~ str_flatten_comma(.x)))
a <- filter_table |>
select(any_of(c(aggregation,cols_to_keep,col_to_merge))) |>
distinct()                                               |>
group_by(across(c(aggregation,cols_to_keep)))            |>
summarise(across(any_of(col_to_merge), ~ str_flatten_comma(.x)))
View(a)
data_sf |>
left_join(merged_col,by=c(aggregation,cols_to_keep))
merged_col  <- filter_table |>
select(any_of(c(aggregation,cols_to_keep,col_to_merge))) |>
distinct()                                               |>
group_by(across(c(aggregation,cols_to_keep)))            |>
summarise(across(any_of(col_to_merge), ~ str_flatten_comma(.x)))
data_sf |>
left_join(merged_col,by=c(aggregation,cols_to_keep))
data_sf <- data_sf |>
left_join(merged_col,by=c(aggregation,cols_to_keep))
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
for(col_to_merge  in cols_to_merge){
merged_col  <- filter_table |>
select(any_of(c(aggregation,cols_to_keep,col_to_merge))) |>
distinct()                                               |>
group_by(across(c(aggregation,cols_to_keep)))            |>
summarise(across(any_of(col_to_merge), ~ str_flatten_comma(.x)))
data_sf <- data_sf |>
left_join(merged_col,by=c(aggregation,cols_to_keep)) |>
relocate(.data$geom,.after=last_col())
}
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
data_sf <- bind_rows(data_sf,data_i)
}
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
data_sf <- suppressMessages(suppressWarnings(data_sf |>
left_join(merged_col,by=c(aggregation,cols_to_keep)) |>
relocate("geom",.after=last_col())
))
for(col_to_merge  in cols_to_merge){
merged_col  <- filter_table |>
select(any_of(c(aggregation,cols_to_keep,col_to_merge))) |>
distinct()                                               |>
group_by(across(c(aggregation,cols_to_keep)))            |>
summarise(across(any_of(col_to_merge), ~ str_flatten_comma(.x)))
data_sf <- suppressMessages(suppressWarnings(data_sf |>
left_join(merged_col,by=c(aggregation,cols_to_keep)) |>
relocate("geom",.after=last_col())
))
}
?str_squish
??where
where
()
filters=list("SAL_NAME_2021"=c("Ormond",
"McKinnon",
"Bentleigh",
"Bentleigh East",
"Carnegie",
"Murrumbeena"))
year="2021"
aggregation=c("SA1_CODE_2021","SAL_NAME_2021")
source("~/GitHub/aussiemaps/R/internal.R")
libary(auscensus)
library(auscensus)
library(arrow)
library(fs)
library(piggyback)
simplification_factor=1
smoothing_threshold=4
filter_table <- list_structure(year,filters) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
library(tidyverse)
filter_table <- list_structure(year,filters) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
source("~/GitHub/aussiemaps/R/internal.R")
filter_table <- list_structure(year,filters) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
library(aussiemaps)
filter_table <- list_structure(year,filters) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))
cache_dir  <- find_maps_cache()
file_regex <- str_c(year,"_[A-Z]{1}")
repo_base      <- get_repo_files() |>
mutate(across(c("file_name"), ~ str_remove_all(.x,"\\.zip"))) |>
select(any_of("file_name"))
repo      <- repo_base |>
filter(if_any(c("file_name"), ~ str_detect(.x,file_regex)))   |>
pull()
repo_base      <- get_repo_files() |>
mutate(across(c("file_name"), ~ str_remove_all(.x,"\\.zip"))) |>
select(any_of("file_name"))
library(lubridate)
repo_base      <- get_repo_files() |>
mutate(across(c("file_name"), ~ str_remove_all(.x,"\\.zip"))) |>
select(any_of("file_name"))
repo      <- repo_base |>
filter(if_any(c("file_name"), ~ str_detect(.x,file_regex)))   |>
pull()
state_col <- colnames(filter_table)[str_detect(colnames(filter_table),"STATE|STE")]
state_col <- state_col[str_detect(state_col,"NAME")]
required_states <- filter_table |>
select(all_of(c(state_col))) |>
distinct() |>
mutate(across(all_of(as.vector(state_col)), ~ str_replace_all(.x," ","\\."))) |>
mutate(across(all_of(as.vector(state_col)), ~ str_c(year,"_",.x))) |>
filter(if_any(all_of(as.vector(state_col)), ~ .x %in% repo))           |>
pull()
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))              |>
mutate(across(where(is.character), ~.str_squish(.x))) |>
mutate(across(where(is.character), ~ str_remove_all(.x, "[^A-z|0-9|[:punct:]|\\s]")))
data_sf <- bind_rows(data_sf,data_i)
}
library(rgdal)
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))              |>
mutate(across(where(is.character), ~.str_squish(.x))) |>
mutate(across(where(is.character), ~ str_remove_all(.x, "[^A-z|0-9|[:punct:]|\\s]")))
data_sf <- bind_rows(data_sf,data_i)
}
library(sf)
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))              |>
mutate(across(where(is.character), ~.str_squish(.x))) |>
mutate(across(where(is.character), ~ str_remove_all(.x, "[^A-z|0-9|[:punct:]|\\s]")))
data_sf <- bind_rows(data_sf,data_i)
}
source("~/GitHub/aussiemaps/R/internal.R")
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))              |>
mutate(across(where(is.character), ~.str_squish(.x))) |>
mutate(across(where(is.character), ~ str_remove_all(.x, "[^A-z|0-9|[:punct:]|\\s]")))
data_sf <- bind_rows(data_sf,data_i)
}
source("~/GitHub/aussiemaps/R/lists.R")
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))              |>
mutate(across(where(is.character), ~.str_squish(.x))) |>
mutate(across(where(is.character), ~ str_remove_all(.x, "[^A-z|0-9|[:punct:]|\\s]")))
data_sf <- bind_rows(data_sf,data_i)
}
data_sf <- NULL
for(repo_i in required_states){
data_i <- suppressMessages(suppressWarnings(load_aussiemaps_gpkg(repo_i,filter_table))) |>
select(-matches("AREA_ALBERS_SQKM")) |>
select(-matches("\\."))              |>
mutate(across(where(is.character), ~str_squish(.x))) |>
mutate(across(where(is.character), ~ str_remove_all(.x, "[^A-z|0-9|[:punct:]|\\s]")))
data_sf <- bind_rows(data_sf,data_i)
}
rm(data_i)
aggregation <- as.vector(aggregation)
for(i in 1:length(aggregation)){
aggregation_prefix <- str_extract(aggregation[i],"^[^_]*")
aggregation_suffix <- str_extract(aggregation[i],"[0-9]{4}")
aggregation[i]  <- repo_base |>
filter(if_any(c("file_name"), ~ str_detect(.x,aggregation_prefix))) |>
filter(if_any(c("file_name"), ~ str_detect(.x,as.character(aggregation_suffix)))) |>
filter(if_any(c("file_name"), ~ str_detect(.x,"CODE"))) |>
head(1) |>
pull()
}
aggregation
cols_to_keep <-filter_table |>
mutate(across(everything(), as.character)) |>
select(-any_of(c("id","area","Year"))) |>
pivot_longer(-any_of(aggregation),values_to = "value",names_to = "geo_unit") |>
distinct() |>
group_by(across(all_of(c(aggregation,"geo_unit")))) |>
summarise(n=n(),.groups="drop") |>
group_by(across(all_of(c("geo_unit")))) |>
summarise(n=mean(n),.groups="drop") |>
filter(if_any(c("n"), ~ .x==1)) |>
select(any_of("geo_unit")) |>
distinct() |>
pull()
cols_to_keep <- c(cols_to_keep,"Year")
cols_to_merge <- colnames(filter_table)
cols_to_merge <- cols_to_merge[!(cols_to_merge %in% c(cols_to_keep,aggregation,"id","area"))]
load_aussiemaps_parquet(aggregation)
#new aggregated sum
areas_prop <- list()
for(i in 1:length(aggregation)){
areas_prop[[i]] <- load_aussiemaps_parquet(aggregation[i]) |>
filter(if_any(c("id"), ~ .x %in% filter_table$id)) |>
collect() |>
group_by(across(c("geo_col")))   |>
summarise(across(any_of("prop"), ~ sum(.x)),.groups="drop")
}
areas_prop
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
library(smoothr)
sf_use_s2(FALSE)
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
library(units)
sf_use_s2(FALSE)
data_sf <- suppressMessages(suppressWarnings(data_sf |>
group_by(across(c(aggregation,cols_to_keep))) |>
summarise(.groups="drop") |>
st_make_valid() |>
st_union(by_feature = TRUE) |>
fill_holes(set_units(smoothing_threshold,"km^2"))
))
for(col_to_merge  in cols_to_merge){
merged_col  <- filter_table |>
select(any_of(c(aggregation,cols_to_keep,col_to_merge))) |>
distinct()                                               |>
group_by(across(c(aggregation,cols_to_keep)))            |>
summarise(across(any_of(col_to_merge), ~ str_flatten_comma(.x)),.groups="drop")
data_sf <- suppressMessages(suppressWarnings(data_sf |>
left_join(merged_col,by=c(aggregation,cols_to_keep)) |>
relocate("geom",.after=last_col())
))
}
for(col_to_merge  in cols_to_merge){
merged_col  <- filter_table |>
select(any_of(c(aggregation,cols_to_keep,col_to_merge))) |>
distinct()                                               |>
group_by(across(c(aggregation,cols_to_keep)))            |>
summarise(across(any_of(col_to_merge), ~ str_flatten_comma(.x)),.groups="drop")
data_sf_external <- suppressMessages(suppressWarnings(data_sf_external |>
left_join(merged_col,by=c(aggregation,cols_to_keep)) |>
relocate(.data$geom,.after=last_col())
))
}
join_key <- as.vector("geo_col")
areas_prop
i<-1
names(join_key) <- aggregation[i]
join_key
areas_prop
data_sf <- data_sf |>
left_join(areas_prop[[i]] |>
rename("prop_i"="prop"),by=join_key) |>
filter(if_any(c("prop_i"), ~  !is.na(.x)))
data_sf
colnames(data_sf)
"prop" %in% colnames(data_sf)
library(aussiemaps)
library(aussiemaps)
library(aussiemaps)
library(aussiemaps)
library(auscensus)
library(auspol)
library(auspol)
library(tidyverse)
library(leaflet)
library(auspol)
library(tidyverse)
library(leaflet)
library(echarts4r)
library(echarts4r)
area <- get_map(filters=list("SAL_NAME_2021"=c("Ormond",
"McKinnon",
"Bentleigh",
"Bentleigh East",
"Carnegie",
"Murrumbeena")),year="2021",aggregation=c("SA1_CODE_2021","SAL_NAME_2021"))
